{"version":3,"sources":["../../../../../../src/streaming/rules/abr/ThroughputRule.js"],"names":["ThroughputRule","config","context","metricsModel","instance","logger","setup","getInstance","getLogger","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaInfo","getMediaInfo","mediaType","getMediaType","metrics","getReadOnlyMetricsFor","scheduleController","getScheduleController","abrController","getAbrController","streamInfo","getStreamInfo","isDynamic","manifestInfo","throughputHistory","getThroughputHistory","throughput","getSafeAverageThroughput","latency","getAverageLatency","bufferStateVO","BufferState","length","useBufferOccupancyABR","isNaN","getAbandonmentStateFor","AbrController","ABANDON_LOAD","state","BufferController","BUFFER_LOADED","quality","getQualityForBitrate","setTimeToLoadDelay","debug","Math","round","reason","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,oE,iEACA,8D,2DACA,wD,yDACA,0C,2CACA,+C,2DACA,oD,sIAnCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCA,QAASA,eAAT,CAAwBC,MAAxB,CAAgC,CAE5BA,OAASA,QAAU,EAAnB,CACA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,cAAeF,OAAOE,YAA5B,CAEA,GAAIC,gBAAJ,CACIC,aADJ,CAGA,QAASC,MAAT,EAAiB,CACbD,OAAS,oBAAMH,OAAN,EAAeK,WAAf,GAA6BC,SAA7B,CAAuCJ,QAAvC,CAAT,CACH,CAED,QAASK,YAAT,EAAuB,CACnB,GAAI,CAACN,YAAD,EAAiB,CAACA,aAAaO,cAAb,CAA4B,uBAA5B,CAAtB,CAA4E,CACxE,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,YAAT,CAAqBC,YAArB,CAAmC,CAC/B,GAAMC,eAAgB,4BAAcd,OAAd,EAAuBe,MAAvB,EAAtB,CAEA,GAAI,CAACF,YAAD,EAAiB,CAACA,aAAaL,cAAb,CAA4B,cAA5B,CAAlB,EAAiE,CAACK,aAAaL,cAAb,CAA4B,cAA5B,CAAlE,EAAiH,CAACK,aAAaL,cAAb,CAA4B,uBAA5B,CAAlH,EACA,CAACK,aAAaL,cAAb,CAA4B,kBAA5B,CADD,EACoD,CAACK,aAAaL,cAAb,CAA4B,uBAA5B,CADzD,CAC+G,CAC3G,MAAOM,cAAP,CACH,CAEDP,cAEA,GAAMS,WAAYH,aAAaI,YAAb,EAAlB,CACA,GAAMC,WAAYL,aAAaM,YAAb,EAAlB,CACA,GAAMC,SAAUnB,aAAaoB,qBAAb,CAAmCH,SAAnC,CAAhB,CACA,GAAMI,oBAAqBT,aAAaU,qBAAb,EAA3B,CACA,GAAMC,eAAgBX,aAAaY,gBAAb,EAAtB,CACA,GAAMC,YAAab,aAAac,aAAb,EAAnB,CACA,GAAMC,WAAYF,YAAcA,WAAWG,YAAzB,CAAwCH,WAAWG,YAAX,CAAwBD,SAAhE,CAA4E,IAA9F,CACA,GAAME,mBAAoBN,cAAcO,oBAAd,EAA1B,CACA,GAAMC,YAAaF,kBAAkBG,wBAAlB,CAA2Cf,SAA3C,CAAsDU,SAAtD,CAAnB,CACA,GAAMM,SAAUJ,kBAAkBK,iBAAlB,CAAoCjB,SAApC,CAAhB,CACA,GAAMkB,eAAiBhB,QAAQiB,WAAR,CAAoBC,MAApB,CAA6B,CAA9B,CAAmClB,QAAQiB,WAAR,CAAoBjB,QAAQiB,WAAR,CAAoBC,MAApB,CAA6B,CAAjD,CAAnC,CAAyF,IAA/G,CACA,GAAMC,uBAAwB1B,aAAa0B,qBAAb,EAA9B,CAEA,GAAI,CAACnB,OAAD,EAAYoB,MAAMR,UAAN,CAAZ,EAAiC,CAACI,aAAlC,EAAmDG,qBAAvD,CAA8E,CAC1E,MAAOzB,cAAP,CACH,CAED,GAAIU,cAAciB,sBAAd,CAAqCvB,SAArC,IAAoDwB,wBAAcC,YAAtE,CAAoF,CAChF,GAAIP,cAAcQ,KAAd,GAAwBC,2BAAiBC,aAAzC,EAA0DlB,SAA9D,CAAyE,CACrEd,cAAciC,OAAd,CAAwBvB,cAAcwB,oBAAd,CAAmChC,SAAnC,CAA8CgB,UAA9C,CAA0DE,OAA1D,CAAxB,CACAZ,mBAAmB2B,kBAAnB,CAAsC,CAAtC,EACA9C,OAAO+C,KAAP,CAAa,8BAAb,CAA6CpC,cAAciC,OAA3D,CAAoE,QAApE,CAA6E7B,SAA7E,CAAwF,oBAAxF,CAA8GiC,KAAKC,KAAL,CAAWpB,UAAX,CAA9G,CAAsI,MAAtI,EACAlB,cAAcuC,MAAd,CAAuB,CAACrB,WAAYA,UAAb,CAAyBE,QAASA,OAAlC,CAAvB,CACH,CACJ,CAED,MAAOpB,cAAP,CACH,CAED,QAASwC,MAAT,EAAiB,CACb;AACH,CAEDpD,SAAW,CACPU,YAAaA,WADN,CAEP0C,MAAOA,KAFA,CAAX,CAKAlD,QAEA,MAAOF,SAAP,CACH,CAEDJ,eAAeyD,qBAAf,CAAuC,gBAAvC,C,gBACeC,uBAAaC,eAAb,CAA6B3D,cAA7B,C","file":"ThroughputRule.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport BufferController from '../../controllers/BufferController';\nimport AbrController from '../../controllers/AbrController';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\n\nfunction ThroughputRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const metricsModel = config.metricsModel;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function checkConfig() {\n        if (!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const metrics = metricsModel.getReadOnlyMetricsFor(mediaType);\n        const scheduleController = rulesContext.getScheduleController();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const bufferStateVO = (metrics.BufferState.length > 0) ? metrics.BufferState[metrics.BufferState.length - 1] : null;\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n        if (!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== AbrController.ABANDON_LOAD) {\n            if (bufferStateVO.state === BufferController.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                scheduleController.setTimeToLoadDelay(0);\n                logger.debug('requesting switch to index: ', switchRequest.quality, 'type: ',mediaType, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]}