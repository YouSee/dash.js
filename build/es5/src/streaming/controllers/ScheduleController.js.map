{"version":3,"sources":["../../../../../src/streaming/controllers/ScheduleController.js"],"names":["ScheduleController","config","context","eventBus","getInstance","metricsModel","adapter","dashMetrics","dashManifestModel","timelineConverter","mediaPlayerModel","abrController","playbackController","streamController","textController","type","streamProcessor","mediaController","instance","logger","fragmentModel","currentRepresentationInfo","initialRequest","isStopped","playListMetrics","playListTraceMetrics","playListTraceMetricsClosed","isFragmentProcessingInProgress","timeToLoadDelay","scheduleTimeout","seekTarget","bufferLevelRule","nextFragmentRequestRule","lastFragmentRequest","topQualityIndex","lastInitQuality","replaceRequestArray","switchTrack","bufferResetInProgress","mediaRequest","isReplacementRequest","setup","getLogger","resetInitialSettings","initialize","getFragmentModel","create","getIsTextTrack","mimeType","on","Events","TIMED_TEXT_REQUESTED","onTimedTextRequested","QUALITY_CHANGE_REQUESTED","onQualityChanged","DATA_UPDATE_STARTED","onDataUpdateStarted","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","STREAM_COMPLETED","onStreamCompleted","STREAM_INITIALIZED","onStreamInitialized","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","BUFFER_CLEARED","onBufferCleared","BYTES_APPENDED_END_FRAGMENT","onBytesAppended","INIT_REQUESTED","onInitRequested","QUOTA_EXCEEDED","onQuotaExceeded","PLAYBACK_SEEKING","onPlaybackSeeking","PLAYBACK_STARTED","onPlaybackStarted","PLAYBACK_RATE_CHANGED","onPlaybackRateChanged","PLAYBACK_TIME_UPDATED","onPlaybackTimeUpdated","URL_RESOLUTION_FAILED","onURLResolutionFailed","FRAGMENT_LOADING_ABANDONED","onFragmentLoadingAbandoned","isStarted","start","isBufferingCompleted","warn","debug","addPlaylistTraceMetrics","startScheduleTimer","stop","clearTimeout","hasTopQualityChanged","id","newTopQualityIndex","getTopQualityIndexFor","info","schedule","bufferController","getBufferController","isPaused","getScheduleWhilePaused","Constants","FRAGMENTED_TEXT","TEXT","isTextEnabled","getIsBufferingCompleted","validateExecutedFragmentRequest","isReplacement","length","streamInfo","getStreamInfo","isNaN","mediaInfo","execute","isTrackTypePresent","VIDEO","getNextFragment","fragmentController","getFragmentController","quality","switchInitData","getSwitchMode","MediaController","TRACK_SWITCH_MODE_ALWAYS_REPLACE","replacement","shift","isInitializationRequest","representationId","request","getIsPruningInProgress","setSeekTarget","NaN","startTime","duration","setIndexHandlerTime","delayLoadingTime","Date","getTime","setTimeToLoadDelay","manifestInfo","isDynamic","url","executeRequest","setFragmentProcessState","getLowLatencyEnabled","checkPlaybackQuality","time","safeBufferLevel","fragmentDuration","getRequests","state","FragmentModel","FRAGMENT_MODEL_EXECUTED","threshold","indexOf","fastSwitchModeEnabled","getFastSwitchEnabled","bufferLevel","getBufferLevel","abandonmentState","getAbandonmentStateFor","trackChanged","isCurrentTrack","TRACK_SWITCH_MODE_NEVER_REPLACE","qualityChanged","AbrController","ABANDON_LOAD","replaceRequest","index","value","setTimeout","e","sender","getStreamProcessor","getInitRequest","bandwidth","switchTrackAsked","push","mediaType","getRepresentationInfo","newQuality","undefined","Error","clearPlayListTraceMetrics","PlayListTrace","REPRESENTATION_SWITCH_STOP_REASON","completeQualityChange","trigger","item","TRACK_CHANGE_RENDERED","oldMediaInfo","newMediaInfo","adaptationIndex","QUALITY_CHANGE_RENDERED","oldQuality","error","convertDataToRepresentationInfo","currentRepresentation","getIsDynamic","setTimeSyncCompleted","setLiveEdgeSeekTarget","getStreamStartTime","setSeekStartTime","liveEdgeFinder","getLiveEdgeFinder","liveEdge","getLiveEdge","dvrWindowSize","DVRWindowSize","getStartLiveStreamOver","computeLiveDelay","getFragmentRequest","ignoreIsFinished","liveStartTime","getLiveDelay","setLiveStartTime","seek","manifestUpdateInfo","getCurrentManifestUpdate","getMetricsFor","STREAM","updateManifestUpdateInfo","currentTime","presentationStartTime","latency","clientTimeOffset","getClientTimeOffset","range","serviceLocation","addExecutedRequest","fragEndTime","isSeeking","unintended","removeExecutedRequestsAfterTime","from","syncExecutedRequestsWithBufferedRange","getBuffer","getAllBufferRanges","hasEnoughSpaceToAppend","BufferController","BUFFER_EMPTY","REBUFFERING_REASON","abortRequests","seekTime","DVRWindow","end","playbackspeed","playbackRate","toString","getBufferTarget","getType","setPlayList","playList","finalisePlayList","reason","endTime","stopreason","trace","representationid","mstart","getPlaybackRate","reset","off","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"ScheduleController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {PlayListTrace} from '../vo/metrics/PlayList';\nimport AbrController from './AbrController';\nimport BufferController from './BufferController';\nimport BufferLevelRule from '../rules/scheduling/BufferLevelRule';\nimport NextFragmentRequestRule from '../rules/scheduling/NextFragmentRequestRule';\nimport FragmentModel from '../models/FragmentModel';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport MediaController from './MediaController';\nimport {replaceTokenForTemplate} from '../../dash/utils/SegmentsUtils';\n\nfunction ScheduleController(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const metricsModel = config.metricsModel;\n    const adapter = config.adapter;\n    const dashMetrics = config.dashMetrics;\n    const dashManifestModel = config.dashManifestModel;\n    const timelineConverter = config.timelineConverter;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const streamController = config.streamController;\n    const textController = config.textController;\n    const type = config.type;\n    const streamProcessor = config.streamProcessor;\n    const mediaController = config.mediaController;\n\n    let instance,\n        logger,\n        fragmentModel,\n        currentRepresentationInfo,\n        initialRequest,\n        isStopped,\n        playListMetrics,\n        playListTraceMetrics,\n        playListTraceMetricsClosed,\n        isFragmentProcessingInProgress,\n        timeToLoadDelay,\n        scheduleTimeout,\n        seekTarget,\n        bufferLevelRule,\n        nextFragmentRequestRule,\n        lastFragmentRequest,\n        topQualityIndex,\n        lastInitQuality,\n        replaceRequestArray,\n        switchTrack,\n        bufferResetInProgress,\n        mediaRequest,\n        isReplacementRequest;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n    }\n\n    function initialize() {\n        fragmentModel = streamProcessor.getFragmentModel();\n\n        bufferLevelRule = BufferLevelRule(context).create({\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            metricsModel: metricsModel,\n            mediaPlayerModel: mediaPlayerModel,\n            textController: textController\n        });\n\n        nextFragmentRequestRule = NextFragmentRequestRule(context).create({\n            adapter: adapter,\n            textController: textController,\n            playbackController: playbackController\n        });\n\n        if (dashManifestModel.getIsTextTrack(config.mimeType)) {\n            eventBus.on(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.on(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.on(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.on(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.on(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.on(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.on(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.on(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.on(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.on(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n    }\n\n    function isStarted() {\n        return (isStopped === false);\n    }\n\n    function start() {\n        if (!currentRepresentationInfo || streamProcessor.isBufferingCompleted()) {\n            logger.warn('Start denied to Schedule Controller');\n            return;\n        }\n        logger.debug('Schedule Controller starts');\n        addPlaylistTraceMetrics();\n        isStopped = false;\n\n        if (initialRequest) {\n            initialRequest = false;\n        }\n\n        startScheduleTimer(0);\n    }\n\n    function stop() {\n        if (isStopped) {\n            return;\n        }\n        logger.debug('Schedule Controller stops');\n        isStopped = true;\n        clearTimeout(scheduleTimeout);\n    }\n\n    function hasTopQualityChanged(type, id) {\n        topQualityIndex[id] = topQualityIndex[id] || {};\n        const newTopQualityIndex = abrController.getTopQualityIndexFor(type, id);\n\n        if (topQualityIndex[id][type] != newTopQualityIndex) {\n            logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);\n            topQualityIndex[id][type] = newTopQualityIndex;\n            return true;\n        }\n        return false;\n\n    }\n\n    function schedule() {\n        const bufferController = streamProcessor.getBufferController();\n        if (isStopped || isFragmentProcessingInProgress || !bufferController ||\n            (playbackController.isPaused() && !mediaPlayerModel.getScheduleWhilePaused()) ||\n            ((type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) && !textController.isTextEnabled())) {\n            logger.debug('Schedule stop!');\n            return;\n        }\n\n        if (bufferController.getIsBufferingCompleted()) {\n            logger.debug('Schedule stop because buffering is completed!');\n            return;\n        }\n\n        validateExecutedFragmentRequest();\n\n        const isReplacement = replaceRequestArray.length > 0;\n        const streamInfo = streamProcessor.getStreamInfo();\n        if (bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement ||\n            hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type, streamInfo.id) ||\n            bufferLevelRule.execute(streamProcessor, streamController.isTrackTypePresent(Constants.VIDEO))) {\n\n            const getNextFragment = function () {\n                const fragmentController = streamProcessor.getFragmentController();\n                if (currentRepresentationInfo.quality !== lastInitQuality) {\n                    logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);\n                    lastInitQuality = currentRepresentationInfo.quality;\n                    streamProcessor.switchInitData(currentRepresentationInfo.id);\n                } else if (switchTrack) {\n                    logger.debug('Switch track has been asked, get init request for ' + type + ' with representationid = ' + currentRepresentationInfo.id);\n                    bufferResetInProgress = mediaController.getSwitchMode(type) === MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE ? true : false;\n                    streamProcessor.switchInitData(currentRepresentationInfo.id, bufferResetInProgress);\n                    lastInitQuality = currentRepresentationInfo.quality;\n                    switchTrack = false;\n                } else {\n                    const replacement = replaceRequestArray.shift();\n\n                    if (fragmentController.isInitializationRequest(replacement)) {\n                        // To be sure the specific init segment had not already been loaded.\n                        streamProcessor.switchInitData(replacement.representationId);\n                    } else {\n                        let request;\n                        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\n                        if (!streamProcessor.getBufferController().getIsPruningInProgress()) {\n                            request = nextFragmentRequestRule.execute(streamProcessor, seekTarget, replacement);\n                            setSeekTarget(NaN);\n                            if (request && !replacement) {\n                                if (!isNaN(request.startTime + request.duration)) {\n                                    adapter.setIndexHandlerTime(streamProcessor, request.startTime + request.duration);\n                                }\n                                request.delayLoadingTime = new Date().getTime() + timeToLoadDelay;\n                                setTimeToLoadDelay(0);\n                            }\n                            if (!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic) {\n                                logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');\n                            }\n                        }\n\n                        if (request) {\n                            logger.debug('Next fragment request url is ' + request.url);\n                            fragmentModel.executeRequest(request);\n                        } else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.\n                            setFragmentProcessState(false);\n                            startScheduleTimer(mediaPlayerModel.getLowLatencyEnabled() ? 100 : 500);\n                        }\n                    }\n                }\n            };\n\n            setFragmentProcessState(true);\n            if (!isReplacement && !switchTrack) {\n                abrController.checkPlaybackQuality(type);\n            }\n\n            getNextFragment();\n\n        } else {\n            startScheduleTimer(500);\n        }\n    }\n\n    function validateExecutedFragmentRequest() {\n        // Validate that the fragment request executed and appended into the source buffer is as\n        // good of quality as the current quality and is the correct media track.\n        const time = playbackController.getTime();\n        const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n        const request = fragmentModel.getRequests({\n            state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n            time: time + safeBufferLevel,\n            threshold: 0\n        })[0];\n\n        if (request && replaceRequestArray.indexOf(request) === -1 && !dashManifestModel.getIsTextTrack(type)) {\n            const fastSwitchModeEnabled = mediaPlayerModel.getFastSwitchEnabled();\n            const bufferLevel = streamProcessor.getBufferLevel();\n            const abandonmentState = abrController.getAbandonmentStateFor(type);\n\n            // Only replace on track switch when NEVER_REPLACE\n            const trackChanged = !mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE;\n            const qualityChanged = request.quality < currentRepresentationInfo.quality;\n\n            if (fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== AbrController.ABANDON_LOAD) {\n                replaceRequest(request);\n                isReplacementRequest = true;\n                logger.debug('Reloading outdated fragment at index: ', request.index);\n            } else if (request.quality > currentRepresentationInfo.quality) {\n                // The buffer has better quality it in then what we would request so set append point to end of buffer!!\n                setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());\n            }\n        }\n    }\n\n    function startScheduleTimer(value) {\n        clearTimeout(scheduleTimeout);\n        scheduleTimeout = setTimeout(schedule, value);\n    }\n\n    function onInitRequested(e) {\n        if (!e.sender || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        getInitRequest(currentRepresentationInfo.quality);\n    }\n\n    function setFragmentProcessState (state) {\n        if (isFragmentProcessingInProgress !== state ) {\n            isFragmentProcessingInProgress = state;\n        } else {\n            logger.debug('isFragmentProcessingInProgress is already equal to', state);\n        }\n    }\n\n    function getInitRequest(quality) {\n        const request = adapter.getInitRequest(streamProcessor, quality);\n        if (request) {\n            setFragmentProcessState(true);\n            request.url = replaceTokenForTemplate(request.url, 'Bandwidth', currentRepresentationInfo ? currentRepresentationInfo.bandwidth : null);\n            fragmentModel.executeRequest(request);\n        }\n    }\n\n    function switchTrackAsked() {\n        switchTrack = true;\n    }\n\n    function replaceRequest(request) {\n        replaceRequestArray.push(request);\n    }\n\n    function onQualityChanged(e) {\n        if (type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfo(e.newQuality);\n\n        if (currentRepresentationInfo === null || currentRepresentationInfo === undefined) {\n            throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');\n        }\n\n        clearPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        addPlaylistTraceMetrics();\n    }\n\n    function completeQualityChange(trigger) {\n        if (playbackController && fragmentModel) {\n            const item = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                time: playbackController.getTime(),\n                threshold: 0\n            })[0];\n            if (item && playbackController.getTime() >= item.startTime) {\n                if ((!lastFragmentRequest.mediaInfo || (item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id)) && trigger) {\n                    eventBus.trigger(Events.TRACK_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldMediaInfo: lastFragmentRequest.mediaInfo,\n                        newMediaInfo: item.mediaInfo\n                    });\n                }\n                if ((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger) {\n                    eventBus.trigger(Events.QUALITY_CHANGE_RENDERED, {\n                        mediaType: type,\n                        oldQuality: lastFragmentRequest.quality,\n                        newQuality: item.quality\n                    });\n                }\n                lastFragmentRequest = {\n                    mediaInfo: item.mediaInfo,\n                    quality: item.quality,\n                    adaptationIndex: item.adaptationIndex\n                };\n            }\n        }\n    }\n\n    function onDataUpdateCompleted(e) {\n        if (e.error || e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);\n    }\n\n    function onStreamInitialized(e) {\n        if (e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id) {\n            return;\n        }\n\n        currentRepresentationInfo = streamProcessor.getRepresentationInfo();\n\n        if (initialRequest) {\n            if (playbackController.getIsDynamic()) {\n                timelineConverter.setTimeSyncCompleted(true);\n                setLiveEdgeSeekTarget();\n            } else {\n                seekTarget = playbackController.getStreamStartTime(false);\n                streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n            }\n        }\n\n        if (isStopped) {\n            start();\n        }\n    }\n\n    function setLiveEdgeSeekTarget() {\n        const liveEdgeFinder = streamProcessor.getLiveEdgeFinder();\n        if (liveEdgeFinder) {\n            const liveEdge = liveEdgeFinder.getLiveEdge();\n            const dvrWindowSize = currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;\n            const startTime = mediaPlayerModel.getStartLiveStreamOver() ? currentRepresentationInfo.fragmentDuration\n              : liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration, dvrWindowSize);\n            const request = adapter.getFragmentRequest(streamProcessor, currentRepresentationInfo, startTime, {\n                ignoreIsFinished: true\n            });\n\n            if (request) {\n                // When low latency mode is selected but browser doesn't support fetch\n                // start at the beginning of the segment to avoid consuming the whole buffer\n                if (mediaPlayerModel.getLowLatencyEnabled()) {\n                    const liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\n                    playbackController.setLiveStartTime(liveStartTime);\n                } else {\n                    playbackController.setLiveStartTime(request.startTime);\n                }\n            } else {\n                logger.debug('setLiveEdgeSeekTarget : getFragmentRequest returned undefined request object');\n            }\n            seekTarget = playbackController.getStreamStartTime(false, liveEdge);\n            streamProcessor.getBufferController().setSeekStartTime(seekTarget);\n\n            //special use case for multi period stream. If the startTime is out of the current period, send a seek command.\n            //in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.\n            if (seekTarget > (currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration)) {\n                playbackController.seek(seekTarget);\n            }\n\n            const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n            metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n                currentTime: seekTarget,\n                presentationStartTime: liveEdge,\n                latency: liveEdge - seekTarget,\n                clientTimeOffset: timelineConverter.getClientTimeOffset()\n            });\n        }\n    }\n\n    function onStreamCompleted(e) {\n        if (e.fragmentModel !== fragmentModel) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n        logger.info('Stream is complete');\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        if (e.sender !== fragmentModel) {\n            return;\n        }\n        logger.info('OnFragmentLoadingCompleted - Url:', e.request ? e.request.url : 'undefined',\n            ', Range:', e.request.range ? e.request.range : 'undefined');\n        if (dashManifestModel.getIsTextTrack(type)) {\n            setFragmentProcessState(false);\n        }\n\n        if (e.error && e.request.serviceLocation && !isStopped) {\n            replaceRequest(e.request);\n            setFragmentProcessState(false);\n            startScheduleTimer(0);\n        }\n\n        if (bufferResetInProgress) {\n            mediaRequest = e.request;\n        }\n    }\n\n    function onPlaybackTimeUpdated() {\n        completeQualityChange(true);\n    }\n\n    function onBytesAppended(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        if (bufferResetInProgress && !isNaN(e.startTime)) {\n            bufferResetInProgress = false;\n            fragmentModel.addExecutedRequest(mediaRequest);\n        }\n\n        setFragmentProcessState(false);\n        if (isReplacementRequest && !isNaN(e.startTime)) {\n            //replace requests process is in progress, call schedule in n seconds.\n            //it is done in order to not add a fragment at the new quality at the end of the buffer before replace process is over.\n            //Indeed, if schedule is called too early, the executed request tested is the same that the one tested during previous schedule (at the new quality).\n            const currentTime = playbackController.getTime();\n            const fragEndTime = e.startTime + currentRepresentationInfo.fragmentDuration;\n            const safeBufferLevel = currentRepresentationInfo.fragmentDuration * 1.5;\n            if ((currentTime + safeBufferLevel) >= fragEndTime) {\n                startScheduleTimer(0);\n            }\n            else {\n                startScheduleTimer((fragEndTime - (currentTime + safeBufferLevel)) * 1000);\n            }\n            isReplacementRequest = false;\n        } else {\n            startScheduleTimer(0);\n        }\n    }\n\n    function onFragmentLoadingAbandoned(e) {\n        if (e.streamProcessor !== streamProcessor) {\n            return;\n        }\n        logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has been aborted');\n        if (!playbackController.isSeeking() && !switchTrack) {\n            logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');\n            replaceRequest(e.request);\n        }\n        setFragmentProcessState(false);\n        startScheduleTimer(0);\n    }\n\n    function onDataUpdateStarted(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n    }\n\n    function onBufferCleared(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        const streamInfo = streamProcessor.getStreamInfo();\n        if (streamInfo) {\n            if (e.unintended) {\n                // There was an unintended buffer remove, probably creating a gap in the buffer, remove every saved request\n                fragmentModel.removeExecutedRequestsAfterTime(e.from,\n                    streamInfo.duration);\n            } else {\n                fragmentModel.syncExecutedRequestsWithBufferedRange(\n                    streamProcessor.getBufferController().getBuffer().getAllBufferRanges(),\n                    streamInfo.duration);\n            }\n        }\n\n        if (e.hasEnoughSpaceToAppend && isStopped) {\n            start();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        if ((e.sender.getStreamProcessor() === streamProcessor) && e.state === BufferController.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            logger.info('Buffer is empty! Stalling!');\n            clearPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onQuotaExceeded(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        stop();\n        setFragmentProcessState(false);\n    }\n\n    function onURLResolutionFailed() {\n        fragmentModel.abortRequests();\n        stop();\n    }\n\n    function onTimedTextRequested(e) {\n        if (e.sender.getStreamProcessor() !== streamProcessor) {\n            return;\n        }\n\n        //if subtitles are disabled, do not download subtitles file.\n        if (textController.isTextEnabled()) {\n            getInitRequest(e.index);\n        }\n    }\n\n    function onPlaybackStarted() {\n        if (isStopped || !mediaPlayerModel.getScheduleWhilePaused()) {\n            start();\n        }\n    }\n\n    function onPlaybackSeeking(e) {\n        seekTarget = e.seekTime;\n        setTimeToLoadDelay(0);\n\n        if (isStopped) {\n            start();\n        }\n\n        const manifestUpdateInfo = dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(Constants.STREAM));\n        const latency = currentRepresentationInfo.DVRWindow && playbackController ? currentRepresentationInfo.DVRWindow.end - playbackController.getTime() : NaN;\n        metricsModel.updateManifestUpdateInfo(manifestUpdateInfo, {\n            latency: latency\n        });\n\n        //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible\n        if (!isFragmentProcessingInProgress) {\n            startScheduleTimer(0);\n        } else {\n            logger.debug('onPlaybackSeeking for ' + type + ', call fragmentModel.abortRequests in order to seek quicker');\n            fragmentModel.abortRequests();\n        }\n    }\n\n    function onPlaybackRateChanged(e) {\n        if (playListTraceMetrics) {\n            playListTraceMetrics.playbackspeed = e.playbackRate.toString();\n        }\n    }\n\n    function setSeekTarget(value) {\n        seekTarget = value;\n    }\n\n    function setTimeToLoadDelay(value) {\n        timeToLoadDelay = value;\n    }\n\n    function getBufferTarget() {\n        return bufferLevelRule.getBufferTarget(streamProcessor, streamController.isTrackTypePresent(Constants.VIDEO));\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function setPlayList(playList) {\n        playListMetrics = playList;\n    }\n\n    function finalisePlayList(time, reason) {\n        clearPlayListTraceMetrics(time, reason);\n        playListMetrics = null;\n    }\n\n    function clearPlayListTraceMetrics(endTime, stopreason) {\n        if (playListMetrics && playListTraceMetricsClosed === false) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = stopreason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    function addPlaylistTraceMetrics() {\n        if (playListMetrics && playListTraceMetricsClosed === true && currentRepresentationInfo) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n            playListTraceMetrics.representationid = currentRepresentationInfo.id;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = playbackController.getTime() * 1000;\n            playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString();\n        }\n    }\n\n    function resetInitialSettings() {\n        isFragmentProcessingInProgress = false;\n        timeToLoadDelay = 0;\n        seekTarget = NaN;\n        playListMetrics = null;\n        playListTraceMetrics = null;\n        playListTraceMetricsClosed = true;\n        initialRequest = true;\n        lastInitQuality = NaN;\n        lastFragmentRequest = {\n            mediaInfo: undefined,\n            quality: NaN,\n            adaptationIndex: NaN\n        };\n        topQualityIndex = {};\n        replaceRequestArray = [];\n        isStopped = true;\n        switchTrack = false;\n        bufferResetInProgress = false;\n        mediaRequest = null;\n        isReplacementRequest = false;\n    }\n\n    function reset() {\n        //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);\n        eventBus.off(Events.DATA_UPDATE_STARTED, onDataUpdateStarted, this);\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, this);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, this);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, this);\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.STREAM_COMPLETED, onStreamCompleted, this);\n        eventBus.off(Events.STREAM_INITIALIZED, onStreamInitialized, this);\n        eventBus.off(Events.QUOTA_EXCEEDED, onQuotaExceeded, this);\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onBytesAppended, this);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, this);\n        eventBus.off(Events.INIT_REQUESTED, onInitRequested, this);\n        eventBus.off(Events.PLAYBACK_RATE_CHANGED, onPlaybackRateChanged, this);\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, this);\n        eventBus.off(Events.PLAYBACK_STARTED, onPlaybackStarted, this);\n        eventBus.off(Events.PLAYBACK_TIME_UPDATED, onPlaybackTimeUpdated, this);\n        eventBus.off(Events.URL_RESOLUTION_FAILED, onURLResolutionFailed, this);\n        eventBus.off(Events.FRAGMENT_LOADING_ABANDONED, onFragmentLoadingAbandoned, this);\n        if (dashManifestModel.getIsTextTrack(type)) {\n            eventBus.off(Events.TIMED_TEXT_REQUESTED, onTimedTextRequested, this);\n        }\n\n        stop();\n        completeQualityChange(false);\n        resetInitialSettings();\n    }\n\n    instance = {\n        initialize: initialize,\n        getType: getType,\n        setSeekTarget: setSeekTarget,\n        setTimeToLoadDelay: setTimeToLoadDelay,\n        replaceRequest: replaceRequest,\n        switchTrackAsked: switchTrackAsked,\n        isStarted: isStarted,\n        start: start,\n        stop: stop,\n        reset: reset,\n        setPlayList: setPlayList,\n        getBufferTarget: getBufferTarget,\n        finalisePlayList: finalisePlayList\n    };\n\n    setup();\n\n    return instance;\n}\n\nScheduleController.__dashjs_factory_name = 'ScheduleController';\nexport default FactoryMaker.getClassFactory(ScheduleController);\n"]}