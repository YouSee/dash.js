{"version":3,"sources":["../../../../src/streaming/Stream.js"],"names":["Stream","config","context","eventBus","getInstance","manifestModel","dashManifestModel","mediaPlayerModel","manifestUpdater","adapter","capabilities","errHandler","timelineConverter","metricsModel","abrController","playbackController","mediaController","textController","videoModel","instance","logger","streamProcessors","isStreamActivated","isMediaInitialized","streamInfo","updateError","isUpdating","protectionController","fragmentController","thumbnailController","eventController","preloaded","trackChangedEvent","codecCompatibilityTable","setup","getLogger","resetInitialSettings","create","registerEvents","on","Events","BUFFERING_COMPLETED","onBufferingCompleted","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","unRegisterEvents","off","registerProtectionEvents","KEY_ERROR","onProtectionError","SERVER_CERTIFICATE_UPDATED","LICENSE_REQUEST_COMPLETE","KEY_SYSTEM_SELECTED","KEY_SESSION_CREATED","KEY_STATUSES_CHANGED","unRegisterProtectionEvents","initialize","StreamInfo","ProtectionController","activate","mediaSource","previousBuffers","result","CURRENT_TRACK_CHANGED","onCurrentTrackChanged","getPreloaded","initializeMedia","initializeAfterPreload","deactivate","keepBuffers","ln","length","errored","i","fragmentModel","getFragmentModel","removeExecutedRequestsBeforeTime","getStartTime","getDuration","reset","setPreloaded","isActive","setMediaSource","isMediaSupported","getMediaInfo","splice","dischargePreBuffer","msg","manifestError","getValue","error","DashJSError","Errors","MANIFEST_ERROR_ID_NOSTREAMS_CODE","fatal","pause","duration","NaN","start","getId","id","getStreamInfo","getFragmentController","getThumbnailController","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getBitrateListFor","type","IMAGE","getBitrateList","mediaInfo","startEventController","stopEventController","stop","event","mediaKeySessionError","message","codec","MUXED","MANIFEST_ERROR_ID_MULTIPLEXED_CODE","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","debug","contentProtection","supportsEncryptedMedia","capabilityError","CAPABILITY_MEDIAKEYS_ERROR_CODE","CAPABILITY_MEDIAKEYS_ERROR_MESSAGE","supportsCodec","e","newMediaInfo","processor","getProcessorForMediaInfo","currentTime","getTime","info","manifest","setCurrentMediaInfo","refreshManifestOnSwitchTrack","refreshManifest","selectMediaInfo","updateTopQualityIndex","switchTrackAsked","abortRequests","getScheduleController","setSeekTarget","setIndexHandlerTime","resetIndexHandler","createStreamProcessor","allMediaForType","optionalSettings","streamProcessor","mimeType","dashMetrics","baseURLController","stream","domStorage","streamController","setBuffer","buffer","getIndexHandler","setCurrentTime","replaceIdx","push","ignoreMediaInfo","idx","index","addMediaInfo","initializeMediaForType","getAllMediaInfoForType","initialMediaInfo","addEmbeddedTrack","addTrack","getTracksFor","getTextDefaultEnabled","checkInitialMediaSettingsForType","getCurrentTrackFor","initializeEventController","setConfig","addInlineEvents","events","getEventsFor","addInbandEvents","element","getElement","filterCodecs","VIDEO","AUDIO","test","nodeName","buffers","createBuffers","checkIfInitializationCompleted","realAdaptation","getAdaptationForType","Array","isArray","Representation_asArray","filter","_","getCodec","hasError","audio","video","DATA_UPDATE_FAILED_ERROR_CODE","DATA_UPDATE_FAILED_ERROR_MESSAGE","getType","initializeForMedia","trigger","STREAM_INITIALIZED","createBuffer","getBuffer","processors","getProcessors","warn","isBufferingCompleted","STREAM_BUFFERING_COMPLETED","sp","sender","getStreamProcessor","arr","updateData","updatedStreamInfo","getMediaInfoForType","oldMediaInfo","undefined","isMediaCodecCompatible","compareCodecs","isProtectionCompatible","compareProtectionConfig","newStreamInfo","currentStreamInfo","newAdaptation","currentAdaptation","ContentProtection","sameMimeType","oldCodecs","map","representation","codecs","newCodecs","codecMatch","some","newCodec","indexOf","partialCodecMatch","oldCodec","codecRootCompatibleWithCodec","codec1","codec2","codecRoot","split","rootCompatible","compatTableCodec","compatibleCodecs","compatibleCodec","value","preload","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"Stream.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport StreamProcessor from './StreamProcessor';\nimport EventController from './controllers/EventController';\nimport FragmentController from './controllers/FragmentController';\nimport ThumbnailController from './thumbnail/ThumbnailController';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Debug from '../core/Debug';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashJSError from './vo/DashJSError';\n\nfunction Stream(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const manifestModel = config.manifestModel;\n    const dashManifestModel = config.dashManifestModel;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const manifestUpdater = config.manifestUpdater;\n    const adapter = config.adapter;\n    const capabilities = config.capabilities;\n    const errHandler = config.errHandler;\n    const timelineConverter = config.timelineConverter;\n    const metricsModel = config.metricsModel;\n    const abrController = config.abrController;\n    const playbackController = config.playbackController;\n    const mediaController = config.mediaController;\n    const textController = config.textController;\n    const videoModel = config.videoModel;\n\n    let instance,\n        logger,\n        streamProcessors,\n        isStreamActivated,\n        isMediaInitialized,\n        streamInfo,\n        updateError,\n        isUpdating,\n        protectionController,\n        fragmentController,\n        thumbnailController,\n        eventController,\n        preloaded,\n        trackChangedEvent;\n\n    const codecCompatibilityTable = [\n        {\n            'codec': 'avc1',\n            'compatibleCodecs': ['avc3']\n        },\n        {\n            'codec': 'avc3',\n            'compatibleCodecs': ['avc1']\n        }\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n\n        fragmentController = FragmentController(context).create({\n            mediaPlayerModel: mediaPlayerModel,\n            metricsModel: metricsModel,\n            errHandler: errHandler\n        });\n\n        registerEvents();\n    }\n\n    function registerEvents() {\n        eventBus.on(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n    }\n\n    function unRegisterEvents() {\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.BUFFERING_COMPLETED, onBufferingCompleted, instance);\n    }\n\n    function registerProtectionEvents() {\n        if (protectionController) {\n            eventBus.on(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.on(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.on(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.on(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.on(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.on(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function unRegisterProtectionEvents() {\n        if (protectionController) {\n            eventBus.off(Events.KEY_ERROR, onProtectionError, instance);\n            eventBus.off(Events.SERVER_CERTIFICATE_UPDATED, onProtectionError, instance);\n            eventBus.off(Events.LICENSE_REQUEST_COMPLETE, onProtectionError, instance);\n            eventBus.off(Events.KEY_SYSTEM_SELECTED, onProtectionError, instance);\n            eventBus.off(Events.KEY_SESSION_CREATED, onProtectionError, instance);\n            eventBus.off(Events.KEY_STATUSES_CHANGED, onProtectionError, instance);\n        }\n    }\n\n    function initialize(StreamInfo, ProtectionController) {\n        streamInfo = StreamInfo;\n        protectionController = ProtectionController;\n        registerProtectionEvents();\n    }\n\n    /**\n     * Activates Stream by re-initializing some of its components\n     * @param {MediaSource} mediaSource\n     * @memberof Stream#\n     * @param {SourceBuffer} previousBuffers\n     */\n    function activate(mediaSource, previousBuffers) {\n        if (!isStreamActivated) {\n            let result;\n            eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n            if (!getPreloaded()) {\n                result = initializeMedia(mediaSource, previousBuffers);\n            } else {\n                initializeAfterPreload();\n                result = previousBuffers;\n            }\n            isStreamActivated = true;\n            return result;\n        }\n        return previousBuffers;\n    }\n\n    /**\n     * Partially resets some of the Stream elements\n     * @memberof Stream#\n     * @param {boolean} keepBuffers\n     */\n    function deactivate(keepBuffers) {\n        let ln = streamProcessors ? streamProcessors.length : 0;\n        const errored = false;\n        for (let i = 0; i < ln; i++) {\n            let fragmentModel = streamProcessors[i].getFragmentModel();\n            fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());\n            streamProcessors[i].reset(errored, keepBuffers);\n        }\n        streamProcessors = [];\n        isStreamActivated = false;\n        isMediaInitialized = false;\n        setPreloaded(false);\n        eventBus.off(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n    }\n\n    function isActive() {\n        return isStreamActivated;\n    }\n\n    function setMediaSource(mediaSource) {\n        for (let i = 0; i < streamProcessors.length;) {\n            if (isMediaSupported(streamProcessors[i].getMediaInfo())) {\n                streamProcessors[i].setMediaSource(mediaSource);\n                i++;\n            } else {\n                streamProcessors[i].reset();\n                streamProcessors.splice(i,1);\n            }\n        }\n\n        for (let i = 0; i < streamProcessors.length; i++) {\n            //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state\n            //so do this after the buffers are created above.\n            streamProcessors[i].dischargePreBuffer();\n        }\n\n        if (streamProcessors.length === 0) {\n            let msg = 'No streams to play.';\n            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg +  'nostreams', manifestModel.getValue()));\n            logger.fatal(msg);\n        }\n    }\n\n    function resetInitialSettings() {\n        deactivate();\n        streamInfo = null;\n        updateError = {};\n        isUpdating = false;\n    }\n\n    function reset() {\n\n        if (playbackController) {\n            playbackController.pause();\n        }\n\n        if (fragmentController) {\n            fragmentController.reset();\n            fragmentController = null;\n        }\n\n        resetInitialSettings();\n\n        unRegisterEvents();\n\n        unRegisterProtectionEvents();\n\n        setPreloaded(false);\n    }\n\n    function getDuration() {\n        return streamInfo ? streamInfo.duration : NaN;\n    }\n\n    function getStartTime() {\n        return streamInfo ? streamInfo.start : NaN;\n    }\n\n    function getId() {\n        return streamInfo ? streamInfo.id : null;\n    }\n\n    function getStreamInfo() {\n        return streamInfo;\n    }\n\n    function getFragmentController() {\n        return fragmentController;\n    }\n\n    function getThumbnailController() {\n        return thumbnailController;\n    }\n\n    function checkConfig() {\n        if (!abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Array}\n     * @memberof Stream#\n     */\n    function getBitrateListFor(type) {\n        checkConfig();\n        if (type === Constants.IMAGE) {\n            if (!thumbnailController) {\n                return [];\n            }\n            return thumbnailController.getBitrateList();\n        }\n        const mediaInfo = getMediaInfo(type);\n        return abrController.getBitrateList(mediaInfo);\n    }\n\n    function startEventController() {\n        if (eventController) {\n            eventController.start();\n        }\n    }\n\n    function stopEventController() {\n        if (eventController) {\n            eventController.stop();\n        }\n    }\n\n    function onProtectionError(event) {\n        if (event.error) {\n            errHandler.mediaKeySessionError(event.error.message);\n            errHandler.error(event.error);\n            logger.fatal(event.error.message);\n            reset();\n        }\n    }\n\n    function isMediaSupported(mediaInfo) {\n        const type = mediaInfo.type;\n        let codec,\n            msg;\n\n        if (type === Constants.MUXED && mediaInfo) {\n            msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';\n            logger.fatal(msg);\n            errHandler.manifestError(msg, 'multiplexedrep', manifestModel.getValue());\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_MULTIPLEXED_CODE, msg, manifestModel.getValue()));\n            return false;\n        }\n\n        if (type === Constants.TEXT || type === Constants.FRAGMENTED_TEXT || type === Constants.EMBEDDED_TEXT || type === Constants.IMAGE) {\n            return true;\n        }\n        codec = mediaInfo.codec;\n        logger.debug(type + ' codec: ' + codec);\n\n        if (!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()) {\n            errHandler.capabilityError('encryptedmedia');\n            errHandler.error(new DashJSError(Errors.CAPABILITY_MEDIAKEYS_ERROR_CODE, Errors.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));\n        } else if (!capabilities.supportsCodec(codec)) {\n            msg = type + 'Codec (' + codec + ') is not supported.';\n            logger.error(msg);\n            return false;\n        }\n\n        return true;\n    }\n\n    function onCurrentTrackChanged(e) {\n        if (e.newMediaInfo.streamInfo.id !== streamInfo.id) return;\n\n        let processor = getProcessorForMediaInfo(e.newMediaInfo);\n        if (!processor) return;\n\n        let currentTime = playbackController.getTime();\n        logger.info('Stream -  Process track changed at current time ' + currentTime);\n        let mediaInfo = e.newMediaInfo;\n        let manifest = manifestModel.getValue();\n\n        adapter.setCurrentMediaInfo(streamInfo.id, mediaInfo.type, mediaInfo);\n\n        logger.debug('Stream -  Update stream controller');\n        if (manifest.refreshManifestOnSwitchTrack) {\n            logger.debug('Stream -  Refreshing manifest for switch track');\n            trackChangedEvent = e;\n            manifestUpdater.refreshManifest();\n        } else {\n            processor.selectMediaInfo(mediaInfo);\n            if (mediaInfo.type !== Constants.FRAGMENTED_TEXT) {\n                abrController.updateTopQualityIndex(mediaInfo);\n                processor.switchTrackAsked();\n                processor.getFragmentModel().abortRequests();\n            } else {\n                processor.getScheduleController().setSeekTarget(NaN);\n                adapter.setIndexHandlerTime(processor, currentTime);\n                adapter.resetIndexHandler(processor);\n            }\n        }\n    }\n\n    function createStreamProcessor(mediaInfo, allMediaForType, mediaSource, optionalSettings) {\n        let streamProcessor = StreamProcessor(context).create({\n            type: mediaInfo.type,\n            mimeType: mediaInfo.mimeType,\n            timelineConverter: timelineConverter,\n            adapter: adapter,\n            manifestModel: manifestModel,\n            dashManifestModel: dashManifestModel,\n            mediaPlayerModel: mediaPlayerModel,\n            metricsModel: metricsModel,\n            dashMetrics: config.dashMetrics,\n            baseURLController: config.baseURLController,\n            stream: instance,\n            abrController: abrController,\n            domStorage: config.domStorage,\n            playbackController: playbackController,\n            mediaController: mediaController,\n            streamController: config.streamController,\n            textController: textController,\n            errHandler: errHandler\n        });\n\n        streamProcessor.initialize(mediaSource);\n        abrController.updateTopQualityIndex(mediaInfo);\n\n        if (optionalSettings) {\n            streamProcessor.setBuffer(optionalSettings.buffer);\n            streamProcessor.getIndexHandler().setCurrentTime(optionalSettings.currentTime);\n            streamProcessors[optionalSettings.replaceIdx] = streamProcessor;\n        } else {\n            streamProcessors.push(streamProcessor);\n        }\n\n        if (optionalSettings && optionalSettings.ignoreMediaInfo) {\n            return;\n        }\n\n        if ((mediaInfo.type === Constants.TEXT || mediaInfo.type === Constants.FRAGMENTED_TEXT)) {\n            let idx;\n            for (let i = 0; i < allMediaForType.length; i++) {\n                if (allMediaForType[i].index === mediaInfo.index) {\n                    idx = i;\n                }\n                streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor\n            }\n            streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info\n        } else {\n            streamProcessor.addMediaInfo(mediaInfo, true);\n        }\n    }\n\n    function initializeMediaForType(type, mediaSource) {\n        const allMediaForType = adapter.getAllMediaInfoForType(streamInfo, type);\n\n        let mediaInfo = null;\n        let initialMediaInfo;\n\n        if (!allMediaForType || allMediaForType.length === 0) {\n            logger.info('No ' + type + ' data.');\n            return;\n        }\n\n        for (let i = 0, ln = allMediaForType.length; i < ln; i++) {\n            mediaInfo = allMediaForType[i];\n\n            if (type === Constants.EMBEDDED_TEXT) {\n                textController.addEmbeddedTrack(mediaInfo);\n            } else {\n                if (!isMediaSupported(mediaInfo)) continue;\n                mediaController.addTrack(mediaInfo);\n            }\n        }\n\n        if (type === Constants.EMBEDDED_TEXT || mediaController.getTracksFor(type, streamInfo).length === 0) {\n            return;\n        }\n\n        if (type === Constants.IMAGE) {\n            thumbnailController = ThumbnailController(context).create({\n                dashManifestModel: dashManifestModel,\n                adapter: adapter,\n                baseURLController: config.baseURLController,\n                stream: instance,\n                timelineConverter: config.timelineConverter\n            });\n            return;\n        }\n\n        if (type !== Constants.FRAGMENTED_TEXT || (type === Constants.FRAGMENTED_TEXT && textController.getTextDefaultEnabled())) {\n            mediaController.checkInitialMediaSettingsForType(type, streamInfo);\n            initialMediaInfo = mediaController.getCurrentTrackFor(type, streamInfo);\n        }\n\n        if (type === Constants.FRAGMENTED_TEXT && !textController.getTextDefaultEnabled()) {\n            initialMediaInfo = mediaController.getTracksFor(type, streamInfo)[0];\n        }\n\n        // TODO : How to tell index handler live/duration?\n        // TODO : Pass to controller and then pass to each method on handler?\n\n        createStreamProcessor(initialMediaInfo, allMediaForType, mediaSource);\n    }\n\n    function initializeEventController () {\n        //if initializeMedia is called from a switch period, eventController could have been already created.\n        if (!eventController) {\n            eventController = EventController(context).create();\n\n            eventController.setConfig({\n                manifestUpdater: manifestUpdater,\n                playbackController: playbackController\n            });\n            addInlineEvents();\n        }\n    }\n\n    function addInlineEvents () {\n        const events = adapter.getEventsFor(streamInfo);\n        eventController.addInlineEvents(events);\n    }\n\n    function addInbandEvents (events) {\n        if (eventController) {\n            eventController.addInbandEvents(events);\n        }\n    }\n\n    function initializeMedia(mediaSource, previousBuffers) {\n        checkConfig();\n        let element = videoModel.getElement();\n\n        initializeEventController();\n\n        isUpdating = true;\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        if (element === null || (element && (/^VIDEO$/i).test(element.nodeName))) {\n            initializeMediaForType(Constants.VIDEO, mediaSource);\n        }\n        initializeMediaForType(Constants.AUDIO, mediaSource);\n        initializeMediaForType(Constants.TEXT, mediaSource);\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n        initializeMediaForType(Constants.MUXED, mediaSource);\n        initializeMediaForType(Constants.IMAGE, mediaSource);\n\n        //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.\n        const buffers = createBuffers(previousBuffers);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n\n        if (streamProcessors.length === 0) {\n            const msg = 'No streams to play.';\n            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());\n            errHandler.error(new DashJSError(Errors.MANIFEST_ERROR_ID_NOSTREAMS_CODE, msg, manifestModel.getValue()));\n            logger.fatal(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n\n        return buffers;\n    }\n\n    function initializeAfterPreload() {\n        isUpdating = true;\n        checkConfig();\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        isMediaInitialized = true;\n        isUpdating = false;\n        if (streamProcessors.length === 0) {\n            let msg = 'No streams to play.';\n            errHandler.manifestError(msg, 'nostreams', manifestModel.getValue());\n            logger.debug(msg);\n        } else {\n            checkIfInitializationCompleted();\n        }\n    }\n\n    function filterCodecs(type) {\n        const realAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), streamInfo.index, type, streamInfo);\n\n        if (!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray)) return;\n\n        // Filter codecs that are not supported\n        realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter((_, i) => {\n            // keep at least codec from lowest representation\n            if (i === 0) return true;\n\n            const codec = dashManifestModel.getCodec(realAdaptation, i, true);\n            if (!capabilities.supportsCodec(codec)) {\n                logger.error('[Stream] codec not supported: ' + codec);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    function checkIfInitializationCompleted() {\n        const ln = streamProcessors.length;\n        const hasError = !!updateError.audio || !!updateError.video;\n        let error = hasError ? new DashJSError(Errors.DATA_UPDATE_FAILED_ERROR_CODE, Errors.DATA_UPDATE_FAILED_ERROR_MESSAGE) : null;\n\n        for (let i = 0; i < ln; i++) {\n            if (streamProcessors[i].isUpdating() || isUpdating) {\n                return;\n            }\n        }\n\n        if (!isMediaInitialized) {\n            return;\n        }\n\n        if (protectionController) {\n            // Need to check if streamProcessors exists because streamProcessors\n            // could be cleared in case an error is detected while initializing DRM keysystem\n            for (let i = 0; i < ln && streamProcessors[i]; i++) {\n                if (streamProcessors[i].getType() === Constants.AUDIO ||\n                    streamProcessors[i].getType() === Constants.VIDEO ||\n                    streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                    protectionController.initializeForMedia(streamProcessors[i].getMediaInfo());\n                }\n            }\n        }\n\n        eventBus.trigger(Events.STREAM_INITIALIZED, {\n            streamInfo: streamInfo,\n            error: error\n        });\n    }\n\n    function getMediaInfo(type) {\n        const ln = streamProcessors.length;\n        let streamProcessor = null;\n\n        for (let i = 0; i < ln; i++) {\n            streamProcessor = streamProcessors[i];\n\n            if (streamProcessor.getType() === type) {\n                return streamProcessor.getMediaInfo();\n            }\n        }\n\n        return null;\n    }\n\n    function createBuffers(previousBuffers) {\n        const buffers = {};\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            buffers[streamProcessors[i].getType()] = streamProcessors[i].createBuffer(previousBuffers).getBuffer();\n        }\n        return buffers;\n    }\n\n    function onBufferingCompleted(e) {\n        if (e.streamInfo !== streamInfo) {\n            return;\n        }\n\n        let processors = getProcessors();\n        const ln = processors.length;\n\n        if (ln === 0) {\n            logger.warn('onBufferingCompleted - can\\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');\n            return;\n        }\n\n        // if there is at least one buffer controller that has not completed buffering yet do nothing\n        for (let i = 0; i < ln; i++) {\n            //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED\n            if (!processors[i].isBufferingCompleted() && (processors[i].getType() === Constants.AUDIO || processors[i].getType() === Constants.VIDEO)) {\n                logger.warn('onBufferingCompleted - One streamProcessor has finished but', processors[i].getType(), 'one is not buffering completed');\n                return;\n            }\n        }\n\n        logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');\n        eventBus.trigger(Events.STREAM_BUFFERING_COMPLETED, {\n            streamInfo: streamInfo\n        });\n    }\n\n    function onDataUpdateCompleted(e) {\n        let sp = e.sender.getStreamProcessor();\n\n        if (sp.getStreamInfo() !== streamInfo) {\n            return;\n        }\n\n        updateError[sp.getType()] = e.error;\n        checkIfInitializationCompleted();\n    }\n\n    function getProcessorForMediaInfo(mediaInfo) {\n        if (!mediaInfo) {\n            return null;\n        }\n\n        let processors = getProcessors();\n\n        return processors.filter(function (processor) {\n            return (processor.getType() === mediaInfo.type);\n        })[0];\n    }\n\n    function getProcessors() {\n        const ln = streamProcessors.length;\n        let arr = [];\n\n        let type,\n            streamProcessor;\n\n        for (let i = 0; i < ln; i++) {\n            streamProcessor = streamProcessors[i];\n            type = streamProcessor.getType();\n\n            if (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.FRAGMENTED_TEXT || type === Constants.TEXT) {\n                arr.push(streamProcessor);\n            }\n        }\n\n        return arr;\n    }\n\n    function updateData(updatedStreamInfo) {\n        logger.info('Manifest updated... updating data system wide.');\n\n        isStreamActivated = false;\n        isUpdating = true;\n        streamInfo = updatedStreamInfo;\n\n        if (eventController) {\n            addInlineEvents();\n        }\n\n        filterCodecs(Constants.VIDEO);\n        filterCodecs(Constants.AUDIO);\n\n        for (let i = 0, ln = streamProcessors.length; i < ln; i++) {\n            let streamProcessor = streamProcessors[i];\n            let mediaInfo = adapter.getMediaInfoForType(streamInfo, streamProcessor.getType());\n            abrController.updateTopQualityIndex(mediaInfo);\n            streamProcessor.addMediaInfo(mediaInfo, true);\n        }\n\n        if (trackChangedEvent) {\n            let mediaInfo = trackChangedEvent.newMediaInfo;\n            if (mediaInfo.type !== 'fragmentedText') {\n                let processor = getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);\n                if (!processor) return;\n                processor.switchTrackAsked();\n                trackChangedEvent = undefined;\n            }\n        }\n\n        isUpdating = false;\n        checkIfInitializationCompleted();\n    }\n\n    function isMediaCodecCompatible(stream) {\n        return compareCodecs(stream, Constants.VIDEO) && compareCodecs(stream, Constants.AUDIO);\n    }\n\n    function isProtectionCompatible(stream) {\n        return compareProtectionConfig(stream, Constants.VIDEO) && compareProtectionConfig(stream, Constants.AUDIO);\n    }\n\n    function compareProtectionConfig(stream, type) {\n        if (!stream) {\n            return false;\n        }\n        const newStreamInfo = stream.getStreamInfo();\n        const currentStreamInfo = getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        // If any of the periods requires EME, we can't do smooth transition\n        if (newAdaptation.ContentProtection || currentAdaptation.ContentProtection) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function compareCodecs(stream, type) {\n        if (!stream) {\n            return false;\n        }\n        const newStreamInfo = stream.getStreamInfo();\n        const currentStreamInfo = getStreamInfo();\n\n        if (!newStreamInfo || !currentStreamInfo) {\n            return false;\n        }\n\n        const newAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), newStreamInfo.index, type, newStreamInfo);\n        const currentAdaptation = adapter.getAdaptationForType(manifestModel.getValue(), currentStreamInfo.index, type, currentStreamInfo);\n\n        if (!newAdaptation || !currentAdaptation) {\n            // If there is no adaptation for neither the old or the new stream they're compatible\n            return !newAdaptation && !currentAdaptation;\n        }\n\n        const sameMimeType =  newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;\n        const oldCodecs = currentAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const newCodecs = newAdaptation.Representation_asArray.map((representation) => {\n            return representation.codecs;\n        });\n\n        const codecMatch = newCodecs.some((newCodec) => {\n            return oldCodecs.indexOf(newCodec) > -1;\n        });\n\n        const partialCodecMatch = newCodecs.some((newCodec) => oldCodecs.some((oldCodec) => codecRootCompatibleWithCodec(oldCodec, newCodec)));\n        return codecMatch || (partialCodecMatch && sameMimeType);\n    }\n\n    // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table\n    function codecRootCompatibleWithCodec(codec1, codec2) {\n        const codecRoot = codec1.split('.')[0];\n        const rootCompatible = codec2.indexOf(codecRoot) === 0;\n        let compatTableCodec;\n        for (let i = 0; i < codecCompatibilityTable.length; i++) {\n            if (codecCompatibilityTable[i].codec === codecRoot) {\n                compatTableCodec = codecCompatibilityTable[i];\n                break;\n            }\n        }\n        if (compatTableCodec) {\n            return rootCompatible || compatTableCodec.compatibleCodecs.some((compatibleCodec) => codec2.indexOf(compatibleCodec) === 0);\n        }\n        return rootCompatible;\n    }\n\n    function setPreloaded(value) {\n        preloaded = value;\n    }\n\n    function getPreloaded() {\n        return preloaded;\n    }\n\n    function preload(mediaSource, previousBuffers) {\n        initializeEventController();\n\n        initializeMediaForType(Constants.VIDEO, mediaSource);\n        initializeMediaForType(Constants.AUDIO, mediaSource);\n        initializeMediaForType(Constants.TEXT, mediaSource);\n        initializeMediaForType(Constants.FRAGMENTED_TEXT, mediaSource);\n        initializeMediaForType(Constants.EMBEDDED_TEXT, mediaSource);\n        initializeMediaForType(Constants.MUXED, mediaSource);\n        initializeMediaForType(Constants.IMAGE, mediaSource);\n\n        createBuffers(previousBuffers);\n\n        eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n        for (let i = 0; i < streamProcessors.length && streamProcessors[i]; i++) {\n            streamProcessors[i].getScheduleController().start();\n        }\n\n        setPreloaded(true);\n    }\n\n    instance = {\n        initialize: initialize,\n        activate: activate,\n        deactivate: deactivate,\n        isActive: isActive,\n        getDuration: getDuration,\n        getStartTime: getStartTime,\n        getId: getId,\n        getStreamInfo: getStreamInfo,\n        preload: preload,\n        getFragmentController: getFragmentController,\n        getThumbnailController: getThumbnailController,\n        getBitrateListFor: getBitrateListFor,\n        startEventController: startEventController,\n        stopEventController: stopEventController,\n        updateData: updateData,\n        reset: reset,\n        getProcessors: getProcessors,\n        setMediaSource: setMediaSource,\n        isMediaCodecCompatible: isMediaCodecCompatible,\n        isProtectionCompatible: isProtectionCompatible,\n        getPreloaded: getPreloaded,\n        addInbandEvents: addInbandEvents\n    };\n\n    setup();\n    return instance;\n}\n\nStream.__dashjs_factory_name = 'Stream';\nexport default FactoryMaker.getClassFactory(Stream);\n"]}