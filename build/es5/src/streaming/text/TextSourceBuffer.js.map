{"version":3,"sources":["../../../../../src/streaming/text/TextSourceBuffer.js"],"names":["TextSourceBuffer","context","eventBus","getInstance","embeddedInitialized","instance","logger","boxParser","errHandler","dashManifestModel","manifestModel","mediaController","parser","vttParser","ttmlParser","mediaInfos","textTracks","fragmentedFragmentModel","initializationSegmentReceived","timescale","fragmentedTracks","videoModel","streamController","firstFragmentedSubtitleStart","currFragmentedTrackIdx","embeddedTracks","embeddedInitializationSegmentReceived","embeddedTimescale","embeddedLastSequenceNumber","embeddedSequenceNumbers","embeddedCea608FieldParsers","embeddedTextHtmlRender","mseTimeOffset","setup","getLogger","resetInitialSettings","resetFragmented","NaN","initialize","mimeType","streamProcessor","initEmbedded","setConfig","addMediaInfos","isFragmented","getIsTextTrack","concat","getMediaInfoArr","getFragmentModel","buffered","create","getTracksFor","Constants","FRAGMENTED_TEXT","getActiveStreamInfo","currFragTrack","getCurrentTrackFor","i","length","setCurrentFragmentedTrackIdx","createTextTrackFromMediaInfo","abort","deleteAllTextTracks","reset","onVideoChunkReceived","e","chunk","mediaInfo","embeddedCaptions","append","bytes","streamProcessors","getActiveStreamProcessors","getType","getRepresentationInfo","MSETimeOffset","on","Events","VIDEO_CHUNK_RECEIVED","resetEmbedded","off","addEmbeddedTrack","id","CC1","CC3","push","warn","config","getConfig","fragmentModel","idx","captionData","textTrackInfo","TextTrackInfo","trackKindMap","subtitle","caption","getKind","kind","roles","checkTTML","ttml","codec","search","STPP","TTML","lang","label","index","isTTML","defaultTrack","getIsDefault","isEmbedded","accessibility","totalNrTracks","addTextTrack","get_video_start_time","AdaptationSet","Period","videoAdaptationsSet","find","set","SegmentTemplate","SegmentTimeline","S","firstSegment","tManifest","result","sampleList","j","k","samplesInfo","ccContent","mediaType","type","codecType","error","getMediaTimescaleFromMoov","getSamplesInfo","cts","start","getParser","sample","sampleStart","sampleRelStart","add","duration","dataView","DataView","offset","subSizes","ISOBoxer","Utils","dataViewToString","UTF8","images","subOffset","inData","Uint8Array","raw","String","fromCharCode","apply","manifest","getValue","manifestOffsetTime","offsetTime","ttmlTimeIsRelative","parse","addCaptions","removeExecutedRequestsBeforeTime","remove","message","captionArray","sampleData","slice","size","sampleBoxes","parseBuffer","boxes","box1","debug","box2","cue_text","start_time","end_time","end","data","styles","TEXT","byteLength","getCurrentTrackIdx","timedTextError","DashJSError","Errors","TIMED_TEXT_ERROR_ID_PARSE_CODE","TIMED_TEXT_ERROR_MESSAGE_PARSE","VIDEO","segmentType","HTTPRequest","INIT_SEGMENT_TYPE","makeCueAdderForIndex","self","trackIndex","newCue","startTime","endTime","captionScreen","captionsArray","getTTMLRenderingDiv","createHTMLCaptionsFromScreen","getElement","text","getDisplayText","sequenceNumber","lastSequenceNumber","field","handler","trackIdx","getTrackIdxForId","cea608parser","Cea608Parser","indexOf","numSequences","allCcData","extractCea608Data","fieldNr","ccData","fields","fieldParser","addData","samples","splits","cea608Ranges","findCea608Nalus","lastSampleTime","extractCea608DataFromRange","forEach","sortField","sort","a","b","isDefault","substring","VTT","undefined","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"TextSourceBuffer.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport TextTrackInfo from '../vo/TextTrackInfo';\nimport BoxParser from '../utils/BoxParser';\nimport CustomTimeRanges from '../utils/CustomTimeRanges';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport TextTracks from './TextTracks';\nimport EmbeddedTextHtmlRender from './EmbeddedTextHtmlRender';\nimport ISOBoxer from 'codem-isoboxer';\nimport cea608parser from '../../../externals/cea608-parser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport DashJSError from '../vo/DashJSError';\nimport Errors from '../../core/errors/Errors';\n\nfunction TextSourceBuffer() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    let embeddedInitialized = false;\n\n    let instance,\n        logger,\n        boxParser,\n        errHandler,\n        dashManifestModel,\n        manifestModel,\n        mediaController,\n        parser,\n        vttParser,\n        ttmlParser,\n        mediaInfos,\n        textTracks,\n        fragmentedFragmentModel,\n        initializationSegmentReceived,\n        timescale,\n        fragmentedTracks,\n        videoModel,\n        streamController,\n        firstFragmentedSubtitleStart,\n        currFragmentedTrackIdx,\n        embeddedTracks,\n        embeddedInitializationSegmentReceived,\n        embeddedTimescale,\n        embeddedLastSequenceNumber,\n        embeddedSequenceNumbers,\n        embeddedCea608FieldParsers,\n        embeddedTextHtmlRender,\n        mseTimeOffset;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n\n        resetInitialSettings();\n    }\n\n    function resetFragmented () {\n        fragmentedFragmentModel = null;\n        timescale = NaN;\n        fragmentedTracks = [];\n        firstFragmentedSubtitleStart = null;\n        initializationSegmentReceived = false;\n    }\n\n    function resetInitialSettings() {\n        resetFragmented();\n\n        mediaInfos = [];\n        parser = null;\n    }\n\n    function initialize(mimeType, streamProcessor) {\n        if (!embeddedInitialized) {\n            initEmbedded();\n        }\n\n        textTracks.setConfig({\n            videoModel: videoModel\n        });\n        textTracks.initialize();\n\n        if (!boxParser) {\n            boxParser = BoxParser(context).getInstance();\n        }\n\n        addMediaInfos(mimeType, streamProcessor);\n    }\n\n    function addMediaInfos(mimeType, streamProcessor) {\n        const isFragmented = !dashManifestModel.getIsTextTrack(mimeType);\n        if (streamProcessor) {\n            mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());\n\n            if (isFragmented) {\n                fragmentedFragmentModel = streamProcessor.getFragmentModel();\n                instance.buffered = CustomTimeRanges(context).create();\n                fragmentedTracks = mediaController.getTracksFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                const currFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    if (fragmentedTracks[i] === currFragTrack) {\n                        setCurrentFragmentedTrackIdx(i);\n                        break;\n                    }\n                }\n            }\n\n            for (let i = 0; i < mediaInfos.length; i++) {\n                createTextTrackFromMediaInfo(null, mediaInfos[i]);\n            }\n        }\n    }\n\n    function abort() {\n        textTracks.deleteAllTextTracks();\n        boxParser = null;\n        mediaInfos = [];\n        fragmentedFragmentModel = null;\n        initializationSegmentReceived = false;\n        fragmentedTracks = [];\n    }\n\n    function reset() {\n        resetInitialSettings();\n\n        streamController = null;\n        videoModel = null;\n        textTracks = null;\n    }\n\n    function onVideoChunkReceived(e) {\n        const chunk = e.chunk;\n\n        if (chunk.mediaInfo.embeddedCaptions) {\n            append(chunk.bytes, chunk);\n        }\n    }\n\n    function initEmbedded() {\n        embeddedTracks = [];\n        textTracks = TextTracks(context).getInstance();\n        textTracks.setConfig({\n            videoModel: videoModel\n        });\n        textTracks.initialize();\n        boxParser = BoxParser(context).getInstance();\n        currFragmentedTrackIdx = null;\n        embeddedInitializationSegmentReceived = false;\n        embeddedTimescale = 0;\n        embeddedCea608FieldParsers = [];\n        embeddedSequenceNumbers = [];\n        embeddedLastSequenceNumber = null;\n        embeddedInitialized = true;\n        embeddedTextHtmlRender = EmbeddedTextHtmlRender(context).getInstance();\n\n        const streamProcessors = streamController.getActiveStreamProcessors();\n        for (const i in streamProcessors) {\n            if (streamProcessors[i].getType() === 'video') {\n                mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;\n                break;\n            }\n        }\n\n        eventBus.on(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\n    }\n\n    function resetEmbedded() {\n        eventBus.off(Events.VIDEO_CHUNK_RECEIVED, onVideoChunkReceived, this);\n        if (textTracks) {\n            textTracks.deleteAllTextTracks();\n        }\n        embeddedInitialized = false;\n        embeddedTracks = [];\n        embeddedCea608FieldParsers = [null, null];\n        embeddedSequenceNumbers = [];\n        embeddedLastSequenceNumber = null;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        if (!embeddedInitialized) {\n            initEmbedded();\n        }\n        if (mediaInfo) {\n            if (mediaInfo.id === Constants.CC1 || mediaInfo.id === Constants.CC3) {\n                for (let i = 0; i < embeddedTracks.length; i++) {\n                    if (embeddedTracks[i].id === mediaInfo.id) {\n                        return;\n                    }\n                }\n                embeddedTracks.push(mediaInfo);\n            } else {\n                logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');\n            }\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.dashManifestModel) {\n            dashManifestModel = config.dashManifestModel;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n    }\n\n    function getConfig() {\n        const config = {\n            fragmentModel: fragmentedFragmentModel,\n            fragmentedTracks: fragmentedTracks,\n            videoModel: videoModel\n        };\n\n        return config;\n    }\n\n    function setCurrentFragmentedTrackIdx(idx) {\n        currFragmentedTrackIdx = idx;\n    }\n\n    function createTextTrackFromMediaInfo(captionData, mediaInfo) {\n        const textTrackInfo = new TextTrackInfo();\n        const trackKindMap = { subtitle: 'subtitles', caption: 'captions' }; //Dash Spec has no \"s\" on end of KIND but HTML needs plural.\n        const getKind = function () {\n            let kind = (mediaInfo.roles.length > 0) ? trackKindMap[mediaInfo.roles[0]] : trackKindMap.caption;\n            kind = (kind === trackKindMap.caption || kind === trackKindMap.subtitle) ? kind : trackKindMap.caption;\n            return kind;\n        };\n\n        const checkTTML = function () {\n            let ttml = false;\n            if (mediaInfo.codec && mediaInfo.codec.search(Constants.STPP) >= 0) {\n                ttml = true;\n            }\n            if (mediaInfo.mimeType && mediaInfo.mimeType.search(Constants.TTML) >= 0) {\n                ttml = true;\n            }\n            return ttml;\n        };\n\n        textTrackInfo.captionData = captionData;\n        textTrackInfo.lang = mediaInfo.lang;\n        textTrackInfo.label = mediaInfo.id ? mediaInfo.id : mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optionnal parameter, use mediaInfo.index\n        textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest\n        textTrackInfo.isTTML = checkTTML();\n        textTrackInfo.defaultTrack = getIsDefault(mediaInfo);\n        textTrackInfo.isFragmented = !dashManifestModel.getIsTextTrack(mediaInfo.mimeType);\n        textTrackInfo.isEmbedded = mediaInfo.isEmbedded ? true : false;\n        textTrackInfo.kind = getKind();\n        textTrackInfo.roles = mediaInfo.roles;\n        textTrackInfo.accessibility = mediaInfo.accessibility;\n        const totalNrTracks = (mediaInfos ? mediaInfos.length : 0) + embeddedTracks.length;\n        textTracks.addTextTrack(textTrackInfo, totalNrTracks);\n    }\n\n    function get_video_start_time(manifestModel) {\n        const { timescale, Period: { AdaptationSet } } = manifestModel;\n        const videoAdaptationsSet = AdaptationSet.find(set => set.id === 'video');\n        if (videoAdaptationsSet) {\n            const { SegmentTemplate: { SegmentTimeline: { S: [firstSegment] } } } = videoAdaptationsSet;\n            const { tManifest } = firstSegment || {};\n            return tManifest ? tManifest / timescale : 0;\n        }\n        return 0;\n    }\n\n    function append(bytes, chunk) {\n        let result,\n            sampleList,\n            i, j, k,\n            samplesInfo,\n            ccContent;\n        const mediaInfo = chunk.mediaInfo;\n        const mediaType = mediaInfo.type;\n        const mimeType = mediaInfo.mimeType;\n        const codecType = mediaInfo.codec || mimeType;\n        if (!codecType) {\n            logger.error('No text type defined');\n            return;\n        }\n\n        if (mediaType === Constants.FRAGMENTED_TEXT) {\n            if (!initializationSegmentReceived) {\n                initializationSegmentReceived = true;\n                timescale = boxParser.getMediaTimescaleFromMoov(bytes);\n            } else {\n                samplesInfo = boxParser.getSamplesInfo(bytes);\n                sampleList = samplesInfo.sampleList;\n                if (firstFragmentedSubtitleStart === null && sampleList.length > 0) {\n                    firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;\n                }\n                if (codecType.search(Constants.STPP) >= 0) {\n                    parser = parser !== null ? parser : getParser(codecType);\n                    for (i = 0; i < sampleList.length; i++) {\n                        const sample = sampleList[i];\n                        const sampleStart = sample.cts;\n                        const sampleRelStart = sampleStart - firstFragmentedSubtitleStart;\n                        this.buffered.add(sampleRelStart / timescale, (sampleRelStart + sample.duration) / timescale);\n                        const dataView = new DataView(bytes, sample.offset, sample.subSizes[0]);\n                        ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\n                        const images = [];\n                        let subOffset = sample.offset + sample.subSizes[0];\n                        for (j = 1; j < sample.subSizes.length; j++) {\n                            const inData = new Uint8Array(bytes, subOffset, sample.subSizes[j]);\n                            const raw = String.fromCharCode.apply(null, inData);\n                            images.push(raw);\n                            subOffset += sample.subSizes[j];\n                        }\n                        try {\n                            // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.\n                            const manifest = manifestModel.getValue();\n                            const manifestOffsetTime = get_video_start_time(manifest);\n                            const offsetTime = manifest.ttmlTimeIsRelative ? sampleStart / timescale : 0;\n                            result = parser.parse(ccContent, offsetTime, sampleStart / timescale, (sampleStart + sample.duration) / timescale, images);\n                            textTracks.addCaptions(currFragmentedTrackIdx, manifestOffsetTime, result);\n                        } catch (e) {\n                            fragmentedFragmentModel.removeExecutedRequestsBeforeTime();\n                            this.remove();\n                            logger.error('TTML parser error: ' + e.message);\n                        }\n                    }\n                } else {\n                    // WebVTT case\n                    const captionArray = [];\n                    for (i = 0 ; i < sampleList.length; i++) {\n                        const sample = sampleList[i];\n                        sample.cts -= firstFragmentedSubtitleStart;\n                        this.buffered.add(sample.cts / timescale, (sample.cts + sample.duration) / timescale);\n                        const sampleData = bytes.slice(sample.offset, sample.offset + sample.size);\n                        // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.\n                        const sampleBoxes = ISOBoxer.parseBuffer(sampleData);\n\n                        for (j = 0 ; j < sampleBoxes.boxes.length; j++) {\n                            const box1 = sampleBoxes.boxes[j];\n                            logger.debug('VTT box1: ' + box1.type);\n                            if (box1.type === 'vtte') {\n                                continue; //Empty box\n                            }\n                            if (box1.type === 'vttc') {\n                                logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);\n                                for (k = 0 ; k < box1.boxes.length; k++) {\n                                    const box2 = box1.boxes[k];\n                                    logger.debug('VTT box2: ' + box2.type);\n                                    if (box2.type === 'payl') {\n                                        const cue_text = box2.cue_text;\n                                        logger.debug('VTT cue_text = ' + cue_text);\n                                        const start_time = sample.cts / timescale;\n                                        const end_time = (sample.cts + sample.duration) / timescale;\n                                        captionArray.push({\n                                            start: start_time,\n                                            end: end_time,\n                                            data: cue_text,\n                                            styles: {}\n                                        });\n                                        logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (captionArray.length > 0) {\n                        textTracks.addCaptions(currFragmentedTrackIdx, 0, captionArray);\n                    }\n                }\n            }\n        } else if (mediaType === Constants.TEXT) {\n            const dataView = new DataView(bytes, 0, bytes.byteLength);\n            ccContent = ISOBoxer.Utils.dataViewToString(dataView, Constants.UTF8);\n\n            try {\n                result = getParser(codecType).parse(ccContent, 0);\n                textTracks.addCaptions(textTracks.getCurrentTrackIdx(), 0, result);\n            } catch (e) {\n                errHandler.timedTextError(e, 'parse', ccContent);\n                errHandler.error(new DashJSError(Errors.TIMED_TEXT_ERROR_ID_PARSE_CODE, Errors.TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message, ccContent));\n            }\n        } else if (mediaType === Constants.VIDEO) { //embedded text\n            if (chunk.segmentType === HTTPRequest.INIT_SEGMENT_TYPE) {\n                if (embeddedTimescale === 0) {\n                    embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);\n                    for (i = 0; i < embeddedTracks.length; i++) {\n                        createTextTrackFromMediaInfo(null, embeddedTracks[i]);\n                    }\n                }\n            } else { // MediaSegment\n                if (embeddedTimescale === 0) {\n                    logger.warn('CEA-608: No timescale for embeddedTextTrack yet');\n                    return;\n                }\n                const makeCueAdderForIndex = function (self, trackIndex) {\n                    function newCue(startTime, endTime, captionScreen) {\n                        let captionsArray = null;\n                        if (videoModel.getTTMLRenderingDiv()) {\n                            captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(), startTime, endTime, captionScreen);\n                        } else {\n                            const text = captionScreen.getDisplayText();\n                            captionsArray = [{\n                                start: startTime,\n                                end: endTime,\n                                data: text,\n                                styles: {}\n                            }];\n                        }\n                        if (captionsArray) {\n                            textTracks.addCaptions(trackIndex, 0, captionsArray);\n                        }\n                    }\n                    return newCue;\n                };\n\n                samplesInfo = boxParser.getSamplesInfo(bytes);\n\n                const sequenceNumber = samplesInfo.lastSequenceNumber;\n\n                if (!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]) {\n                    // Time to setup the CEA-608 parsing\n                    let field, handler, trackIdx;\n                    for (i = 0; i < embeddedTracks.length; i++) {\n                        if (embeddedTracks[i].id === Constants.CC1) {\n                            field = 0;\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC1);\n                        } else if (embeddedTracks[i].id === Constants.CC3) {\n                            field = 1;\n                            trackIdx = textTracks.getTrackIdxForId(Constants.CC3);\n                        }\n                        if (trackIdx === -1) {\n                            logger.warn('CEA-608: data before track is ready.');\n                            return;\n                        }\n                        handler = makeCueAdderForIndex(this, trackIdx);\n                        embeddedCea608FieldParsers[i] = new cea608parser.Cea608Parser(i + 1, {\n                            'newCue': handler\n                        }, null);\n                    }\n                }\n\n                if (embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1) {\n                    if (embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences) {\n                        for (i = 0; i < embeddedCea608FieldParsers.length; i++) {\n                            if (embeddedCea608FieldParsers[i]) {\n                                embeddedCea608FieldParsers[i].reset();\n                            }\n                        }\n                    }\n\n                    const allCcData = extractCea608Data(bytes, samplesInfo.sampleList);\n\n                    for (let fieldNr = 0; fieldNr < embeddedCea608FieldParsers.length; fieldNr++) {\n                        const ccData = allCcData.fields[fieldNr];\n                        const fieldParser = embeddedCea608FieldParsers[fieldNr];\n                        if (fieldParser) {\n                            for (i = 0; i < ccData.length; i++) {\n                                fieldParser.addData(ccData[i][0] / embeddedTimescale, ccData[i][1]);\n                            }\n                        }\n                    }\n                    embeddedLastSequenceNumber = sequenceNumber;\n                    embeddedSequenceNumbers.push(sequenceNumber);\n                }\n            }\n        }\n    }\n    /**\n     * Extract CEA-608 data from a buffer of data.\n     * @param {ArrayBuffer} data\n     * @param {Array} samples cue information\n     * @returns {Object|null} ccData corresponding to one segment.\n     */\n    function extractCea608Data(data, samples) {\n        if (samples.length === 0) {\n            return null;\n        }\n\n        const allCcData = {\n            splits: [],\n            fields: [[], []]\n        };\n        const raw = new DataView(data);\n        for (let i = 0; i < samples.length; i++) {\n            const sample = samples[i];\n            const cea608Ranges = cea608parser.findCea608Nalus(raw, sample.offset, sample.size);\n            let lastSampleTime = null;\n            let idx = 0;\n            for (let j = 0; j < cea608Ranges.length; j++) {\n                const ccData = cea608parser.extractCea608DataFromRange(raw, cea608Ranges[j]);\n                for (let k = 0; k < 2; k++) {\n                    if (ccData[k].length > 0) {\n                        if (sample.cts !== lastSampleTime) {\n                            idx = 0;\n                        } else {\n                            idx += 1;\n                        }\n                        allCcData.fields[k].push([sample.cts + (mseTimeOffset * embeddedTimescale), ccData[k], idx]);\n                        lastSampleTime = sample.cts;\n                    }\n                }\n            }\n        }\n\n        // Sort by sampleTime ascending order\n        // If two packets have the same sampleTime, use them in the order\n        // they were received\n        allCcData.fields.forEach(function sortField(field) {\n            field.sort(function (a, b) {\n                if (a[0] === b[0]) {\n                    return a[2] - b[2];\n                }\n                return a[0] - b[0];\n            });\n        });\n\n        return allCcData;\n    }\n\n    function getIsDefault(mediaInfo) {\n        //TODO How to tag default. currently same order as listed in manifest.\n        // Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND\n        // Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.\n        let isDefault = false;\n        if (embeddedTracks.length > 1 && mediaInfo.isEmbedded) {\n            isDefault = (mediaInfo.id && mediaInfo.id === Constants.CC1); // CC1 if both CC1 and CC3 exist\n        } else if (embeddedTracks.length === 1) {\n            if (mediaInfo.id && typeof mediaInfo.id === 'string' && mediaInfo.id.substring(0, 2) === 'CC') { // Either CC1 or CC3\n                isDefault = true;\n            }\n        } else if (embeddedTracks.length === 0) {\n            isDefault = (mediaInfo.index === mediaInfos[0].index);\n        }\n        return isDefault;\n    }\n\n    function getParser(codecType) {\n        let parser;\n        if (codecType.search(Constants.VTT) >= 0) {\n            parser = vttParser;\n        } else if (codecType.search(Constants.TTML) >= 0 || codecType.search(Constants.STPP) >= 0) {\n            parser = ttmlParser;\n        }\n        return parser;\n    }\n\n    function remove(start, end) {\n        //if start and end are not defined, remove all\n        if ((start === undefined) && (start === end)) {\n            start = this.buffered.start(0);\n            end = this.buffered.end(this.buffered.length - 1);\n        }\n        this.buffered.remove(start, end);\n    }\n\n    instance = {\n        initialize: initialize,\n        append: append,\n        abort: abort,\n        addEmbeddedTrack: addEmbeddedTrack,\n        resetEmbedded: resetEmbedded,\n        setConfig: setConfig,\n        getConfig: getConfig,\n        setCurrentFragmentedTrackIdx: setCurrentFragmentedTrackIdx,\n        remove: remove,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nTextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';\nexport default FactoryMaker.getSingletonFactory(TextSourceBuffer);\n"]}