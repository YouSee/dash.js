{"version":3,"sources":["../../../../../src/streaming/models/MetricsModel.js"],"names":["MetricsModel","MAXIMUM_LIST_DEPTH","context","eventBus","getInstance","instance","streamMetrics","setup","metricsChanged","trigger","Events","METRICS_CHANGED","metricChanged","mediaType","METRIC_CHANGED","metricUpdated","metricType","vo","METRIC_UPDATED","metric","value","metricAdded","METRIC_ADDED","clearCurrentMetricsForType","type","clearAllCurrentMetrics","getReadOnlyMetricsFor","hasOwnProperty","getMetricsFor","metrics","MetricsList","pushMetrics","list","push","length","shift","appendHttpTrace","httpRequest","s","d","b","HTTPRequestTrace","trace","interval","addHttpRequest","tcpid","url","actualurl","serviceLocation","range","trequest","tresponse","tfinish","responsecode","mediaduration","responseHeaders","traces","HTTPRequest","_tfinish","_stream","_mediaduration","_responseHeaders","_serviceLocation","forEach","pushAndNotify","MetricsConstants","HTTP_REQUEST","addRepresentationSwitch","t","mt","to","lto","TrackSwitch","TRACK_SWITCH","metricObject","addBufferLevel","level","BufferLevel","BUFFER_LEVEL","addBufferState","state","target","BufferState","BUFFER_STATE","addDVRInfo","currentTime","mpd","DVRInfo","time","manifestInfo","DVR_INFO","addDroppedFrames","quality","DroppedFrames","creationTime","droppedFrames","droppedVideoFrames","DROPPED_FRAMES","addSchedulingInfo","startTime","availabilityStartTime","duration","SchedulingInfo","SCHEDULING_INFO","addRequestsQueue","loadingRequests","executedRequests","RequestsQueue","REQUESTS_QUEUE","addManifestUpdate","requestTime","fetchTime","presentationStartTime","clientTimeOffset","buffered","latency","ManifestUpdate","Constants","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","manifestUpdate","updatedFields","field","addManifestUpdateStreamInfo","id","index","start","ManifestUpdateStreamInfo","streamInfo","MANIFEST_UPDATE_STREAM_INFO","addManifestUpdateRepresentationInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","ManifestUpdateRepresentationInfo","representationInfo","MANIFEST_UPDATE_TRACK_INFO","addPlayList","Array","isArray","subreplevel","PLAY_LIST","addDVBErrors","DVB_ERRORS","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"MetricsModel.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport MetricsConstants from '../constants/MetricsConstants';\nimport MetricsList from '../vo/MetricsList';\nimport {HTTPRequest, HTTPRequestTrace} from '../vo/metrics/HTTPRequest';\nimport TrackSwitch from '../vo/metrics/RepresentationSwitch';\nimport BufferLevel from '../vo/metrics/BufferLevel';\nimport BufferState from '../vo/metrics/BufferState';\nimport DVRInfo from '../vo/metrics/DVRInfo';\nimport DroppedFrames from '../vo/metrics/DroppedFrames';\nimport {ManifestUpdate, ManifestUpdateStreamInfo, ManifestUpdateRepresentationInfo} from '../vo/metrics/ManifestUpdate';\nimport SchedulingInfo from '../vo/metrics/SchedulingInfo';\nimport EventBus from '../../core/EventBus';\nimport RequestsQueue from '../vo/metrics/RequestsQueue';\nimport Events from '../../core/events/Events';\nimport FactoryMaker from '../../core/FactoryMaker';\n\nfunction MetricsModel() {\n\n    const MAXIMUM_LIST_DEPTH = 1000;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let instance,\n        streamMetrics;\n\n    function setup() {\n        streamMetrics = {};\n    }\n\n    function metricsChanged() {\n        eventBus.trigger(Events.METRICS_CHANGED);\n    }\n\n    function metricChanged(mediaType) {\n        eventBus.trigger(Events.METRIC_CHANGED, {mediaType: mediaType});\n        metricsChanged();\n    }\n\n    function metricUpdated(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_UPDATED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function metricAdded(mediaType, metricType, vo) {\n        eventBus.trigger(Events.METRIC_ADDED, {mediaType: mediaType, metric: metricType, value: vo});\n        metricChanged(mediaType);\n    }\n\n    function clearCurrentMetricsForType(type) {\n        delete streamMetrics[type];\n        metricChanged(type);\n    }\n\n    function clearAllCurrentMetrics() {\n        streamMetrics = {};\n        metricsChanged();\n    }\n\n    function getReadOnlyMetricsFor(type) {\n        if (streamMetrics.hasOwnProperty(type)) {\n            return streamMetrics[type];\n        }\n\n        return null;\n    }\n\n    function getMetricsFor(type) {\n        let metrics;\n\n        if (streamMetrics.hasOwnProperty(type)) {\n            metrics = streamMetrics[type];\n        } else {\n            metrics = new MetricsList();\n            streamMetrics[type] = metrics;\n        }\n\n        return metrics;\n    }\n\n    function pushMetrics(type, list, value) {\n        let metrics = getMetricsFor(type);\n        metrics[list].push(value);\n        if ( metrics[list].length > MAXIMUM_LIST_DEPTH ) {\n            metrics[list].shift();\n        }\n    }\n\n    function appendHttpTrace(httpRequest, s, d, b) {\n        let vo = new HTTPRequestTrace();\n\n        vo.s = s;\n        vo.d = d;\n        vo.b = b;\n\n        httpRequest.trace.push(vo);\n\n        if (!httpRequest.interval) {\n            httpRequest.interval = 0;\n        }\n\n        httpRequest.interval += d;\n\n        return vo;\n    }\n\n    function addHttpRequest(mediaType, tcpid, type, url, actualurl, serviceLocation, range, trequest, tresponse, tfinish, responsecode, mediaduration, responseHeaders, traces) {\n        let vo = new HTTPRequest();\n\n        // ISO 23009-1 D.4.3 NOTE 2:\n        // All entries for a given object will have the same URL and range\n        // and so can easily be correlated. If there were redirects or\n        // failures there will be one entry for each redirect/failure.\n        // The redirect-to URL or alternative url (where multiple have been\n        // provided in the MPD) will appear as the actualurl of the next\n        // entry with the same url value.\n        if (actualurl && (actualurl !== url)) {\n\n            // given the above, add an entry for the original request\n            addHttpRequest(\n                mediaType,\n                null,\n                type,\n                url,\n                null,\n                null,\n                range,\n                trequest,\n                null, // unknown\n                null, // unknown\n                null, // unknown, probably a 302\n                mediaduration,\n                null,\n                null\n            );\n\n            vo.actualurl = actualurl;\n        }\n\n        vo.tcpid = tcpid;\n        vo.type = type;\n        vo.url = url;\n        vo.range = range;\n        vo.trequest = trequest;\n        vo.tresponse = tresponse;\n        vo.responsecode = responsecode;\n\n        vo._tfinish = tfinish;\n        vo._stream = mediaType;\n        vo._mediaduration = mediaduration;\n        vo._responseHeaders = responseHeaders;\n        vo._serviceLocation = serviceLocation;\n\n        if (traces) {\n            traces.forEach(trace => {\n                appendHttpTrace(vo, trace.s, trace.d, trace.b);\n            });\n        } else {\n            // The interval and trace shall be absent for redirect and failure records.\n            delete vo.interval;\n            delete vo.trace;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.HTTP_REQUEST, vo);\n    }\n\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        let vo = new TrackSwitch();\n\n        vo.t = t;\n        vo.mt = mt;\n        vo.to = to;\n\n        if (lto) {\n            vo.lto = lto;\n        } else {\n            delete vo.lto;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.TRACK_SWITCH, vo);\n    }\n\n    function pushAndNotify(mediaType, metricType, metricObject) {\n        pushMetrics(mediaType, metricType, metricObject);\n        metricAdded(mediaType, metricType, metricObject);\n    }\n\n    function addBufferLevel(mediaType, t, level) {\n        let vo = new BufferLevel();\n        vo.t = t;\n        vo.level = level;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_LEVEL, vo);\n    }\n\n    function addBufferState(mediaType, state, target) {\n        let vo = new BufferState();\n        vo.target = target;\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.BUFFER_STATE, vo);\n    }\n\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        let vo = new DVRInfo();\n        vo.time = currentTime ;\n        vo.range = range;\n        vo.manifestInfo = mpd;\n\n        pushAndNotify(mediaType, MetricsConstants.DVR_INFO, vo);\n    }\n\n    function addDroppedFrames(mediaType, quality) {\n        let vo = new DroppedFrames();\n        let list = getMetricsFor(mediaType).DroppedFrames;\n\n        vo.time = quality.creationTime;\n        vo.droppedFrames = quality.droppedVideoFrames;\n\n        if (list.length > 0 && list[list.length - 1] == vo) {\n            return;\n        }\n\n        pushAndNotify(mediaType, MetricsConstants.DROPPED_FRAMES, vo);\n    }\n\n    function addSchedulingInfo(mediaType, t, type, startTime, availabilityStartTime, duration, quality, range, state) {\n        let vo = new SchedulingInfo();\n\n        vo.mediaType = mediaType;\n        vo.t = t;\n\n        vo.type = type;\n        vo.startTime = startTime;\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.duration = duration;\n        vo.quality = quality;\n        vo.range = range;\n\n        vo.state = state;\n\n        pushAndNotify(mediaType, MetricsConstants.SCHEDULING_INFO, vo);\n    }\n\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        let vo = new RequestsQueue();\n        vo.loadingRequests = loadingRequests;\n        vo.executedRequests = executedRequests;\n\n        getMetricsFor(mediaType).RequestsQueue = vo;\n        metricAdded(mediaType, MetricsConstants.REQUESTS_QUEUE, vo);\n    }\n\n    function addManifestUpdate(mediaType, type, requestTime, fetchTime, availabilityStartTime, presentationStartTime, clientTimeOffset, currentTime, buffered, latency) {\n        let vo = new ManifestUpdate();\n\n        vo.mediaType = mediaType;\n        vo.type = type;\n        vo.requestTime = requestTime; // when this manifest update was requested\n        vo.fetchTime = fetchTime; // when this manifest update was received\n        vo.availabilityStartTime = availabilityStartTime;\n        vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)\n        vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time\n        vo.currentTime = currentTime; // actual element.currentTime\n        vo.buffered = buffered; // actual element.ranges\n        vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)\n\n        pushMetrics(Constants.STREAM, MetricsConstants.MANIFEST_UPDATE, vo);\n        metricAdded(mediaType, MetricsConstants.MANIFEST_UPDATE, vo);\n    }\n\n    function updateManifestUpdateInfo(manifestUpdate, updatedFields) {\n        if (manifestUpdate) {\n            for (let field in updatedFields) {\n                manifestUpdate[field] = updatedFields[field];\n            }\n\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateStreamInfo(manifestUpdate, id, index, start, duration) {\n        if (manifestUpdate) {\n            let vo = new ManifestUpdateStreamInfo();\n\n            vo.id = id;\n            vo.index = index;\n            vo.start = start;\n            vo.duration = duration;\n\n            manifestUpdate.streamInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_STREAM_INFO, manifestUpdate);\n        }\n    }\n\n    function addManifestUpdateRepresentationInfo(manifestUpdate, id, index, streamIndex, mediaType, presentationTimeOffset, startNumber, fragmentInfoType) {\n        if (manifestUpdate) {\n\n            const vo = new ManifestUpdateRepresentationInfo();\n            vo.id = id;\n            vo.index = index;\n            vo.streamIndex = streamIndex;\n            vo.mediaType = mediaType;\n            vo.startNumber = startNumber;\n            vo.fragmentInfoType = fragmentInfoType;\n            vo.presentationTimeOffset = presentationTimeOffset;\n\n            manifestUpdate.representationInfo.push(vo);\n            metricUpdated(manifestUpdate.mediaType, MetricsConstants.MANIFEST_UPDATE_TRACK_INFO, manifestUpdate);\n        }\n    }\n\n    function addPlayList(vo) {\n        let type = Constants.STREAM;\n\n        if (vo.trace && Array.isArray(vo.trace)) {\n            vo.trace.forEach(trace => {\n                if (trace.hasOwnProperty('subreplevel') && !trace.subreplevel) {\n                    delete trace.subreplevel;\n                }\n            });\n        } else {\n            delete vo.trace;\n        }\n\n        pushAndNotify(type, MetricsConstants.PLAY_LIST, vo);\n    }\n\n    function addDVBErrors(vo) {\n        let type = Constants.STREAM;\n\n        pushAndNotify(type, MetricsConstants.DVB_ERRORS, vo);\n    }\n\n    instance = {\n        clearCurrentMetricsForType: clearCurrentMetricsForType,\n        clearAllCurrentMetrics: clearAllCurrentMetrics,\n        getReadOnlyMetricsFor: getReadOnlyMetricsFor,\n        getMetricsFor: getMetricsFor,\n        addHttpRequest: addHttpRequest,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDVRInfo: addDVRInfo,\n        addDroppedFrames: addDroppedFrames,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addManifestUpdate: addManifestUpdate,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsModel.__dashjs_factory_name = 'MetricsModel';\nexport default FactoryMaker.getSingletonFactory(MetricsModel);\n"]}