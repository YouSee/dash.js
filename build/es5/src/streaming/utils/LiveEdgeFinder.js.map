{"version":3,"sources":["../../../../../src/streaming/utils/LiveEdgeFinder.js"],"names":["FactoryMaker","Constants","LiveEdgeFinder","config","instance","timelineConverter","streamProcessor","checkConfig","hasOwnProperty","Error","MISSING_CONFIG_ERROR","getLiveEdge","representationInfo","getRepresentationInfo","liveEdge","DVRWindow","end","useCalculatedLiveEdgeTime","getExpectedLiveEdge","setClientTimeOffset","reset","__dashjs_factory_name","getClassFactory"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BA,MAAOA,aAAP,KAAyB,yBAAzB,CACA,MAAOC,UAAP,KAAsB,wBAAtB,CAEA;;;;GAKA,QAASC,eAAT,CAAwBC,MAAxB,CAAgC,CAE5BA,OAASA,QAAU,EAAnB,CACA,GAAIC,SAAJ,CACA,GAAIC,mBAAoBF,OAAOE,iBAA/B,CACA,GAAIC,iBAAkBH,OAAOG,eAA7B,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,qBAAjC,CAAvB,EAAkF,CAACF,eAAnF,EAAsG,CAACA,gBAAgBE,cAAhB,CAA+B,uBAA/B,CAA3G,CAAoK,CAChK,KAAM,IAAIC,MAAJ,CAAUR,UAAUS,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,YAAT,EAAuB,CACnBJ,cACA,KAAMK,oBAAqBN,gBAAgBO,qBAAhB,EAA3B,CACA,GAAIC,UAAWF,mBAAmBG,SAAnB,CAA6BC,GAA5C,CACA,GAAIJ,mBAAmBK,yBAAvB,CAAkD,CAC9CH,SAAWT,kBAAkBa,mBAAlB,EAAX,CACAb,kBAAkBc,mBAAlB,CAAsCL,SAAWF,mBAAmBG,SAAnB,CAA6BC,GAA9E,EACH,CACD,MAAOF,SAAP,CACH,CAED,QAASM,MAAT,EAAiB,CACbf,kBAAoB,IAApB,CACAC,gBAAkB,IAAlB,CACH,CAEDF,SAAW,CACPO,YAAaA,WADN,CAEPS,MAAOA,KAFA,CAAX,CAKA,MAAOhB,SAAP,CACH,CAEDF,eAAemB,qBAAf,CAAuC,gBAAvC,CACA,cAAerB,cAAasB,eAAb,CAA6BpB,cAA7B,CAAf","file":"LiveEdgeFinder.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\n\n/**\n * @param {Object} config\n * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}\n * @constructor\n */\nfunction LiveEdgeFinder(config) {\n\n    config = config || {};\n    let instance;\n    let timelineConverter = config.timelineConverter;\n    let streamProcessor = config.streamProcessor;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge') || !streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationInfo')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getLiveEdge() {\n        checkConfig();\n        const representationInfo = streamProcessor.getRepresentationInfo();\n        let liveEdge = representationInfo.DVRWindow.end;\n        if (representationInfo.useCalculatedLiveEdgeTime) {\n            liveEdge = timelineConverter.getExpectedLiveEdge();\n            timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);\n        }\n        return liveEdge;\n    }\n\n    function reset() {\n        timelineConverter = null;\n        streamProcessor = null;\n    }\n\n    instance = {\n        getLiveEdge: getLiveEdge,\n        reset: reset\n    };\n\n    return instance;\n}\n\nLiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';\nexport default FactoryMaker.getClassFactory(LiveEdgeFinder);"]}