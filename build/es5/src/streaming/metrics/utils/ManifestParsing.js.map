{"version":3,"sources":["../../../../../../src/streaming/metrics/utils/ManifestParsing.js"],"names":["ManifestParsing","config","instance","dashManifestModel","constants","getMetricsRangeStartTime","manifest","dynamic","range","mpd","getMpd","voPeriods","presentationStartTime","reportingStartTime","availabilityStartTime","getTime","getRegularPeriods","length","start","hasOwnProperty","START_TIME","starttime","getMetrics","metrics","Metrics_asArray","forEach","metricEntry","Metrics","isDynamic","getIsDynamic","metric","Range_asArray","rangeEntry","Range","duration","getDuration","_useWallClockTime","push","Reporting_asArray","reportingEntry","Reporting","reporting","SCHEME_ID_URI","schemeIdUri","prop","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"ManifestParsing.js","sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let dashManifestModel = config.dashManifestModel;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        var mpd = dashManifestModel.getMpd(manifest);\n        var voPeriods;\n        var presentationStartTime = 0;\n        var reportingStartTime;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = this.getRegularPeriods(mpd);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        var metrics = [];\n\n        if (manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = dashManifestModel.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = dashManifestModel.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        for (const prop in reporting) {\n                            if (reporting.hasOwnProperty(prop)) {\n                                reportingEntry[prop] = reporting[prop];\n                            }\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]}